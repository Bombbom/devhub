{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to DevHub \ud83d\ude80","text":"<p>DevHub is your comprehensive resource for modern software development, DevOps practices, and security operations. Whether you're building web APIs, designing system architecture, or implementing DevSecOps workflows, you'll find practical guides and best practices here.</p>"},{"location":"#what-youll-find-here","title":"\ud83c\udfaf What You'll Find Here","text":"<ul> <li> <p> Programming Languages</p> <p>Deep dive into Python, JavaScript/TypeScript, Go, Rust, and SQL with practical examples and best practices.</p> <p> Explore Programming</p> </li> <li> <p> Backend Development</p> <p>Build robust APIs, design scalable architectures, and implement secure authentication systems.</p> <p> Backend Guides</p> </li> <li> <p> DevOps &amp; Infrastructure</p> <p>Master containerization, CI/CD pipelines, Infrastructure as Code, and cloud platforms.</p> <p> DevOps Resources</p> </li> <li> <p> DevSecOps</p> <p>Integrate security throughout your SDLC with automated testing, secure coding, and compliance.</p> <p> Security Practices</p> </li> </ul>"},{"location":"#quick-start-paths","title":"\ud83d\ude80 Quick Start Paths","text":"Backend DeveloperDevOps EngineerSecurity EngineerFull Stack Developer <p>Perfect for developers focusing on server-side development and APIs.</p> <ol> <li>Development Environment Setup</li> <li>API Development with FastAPI</li> <li>Database Design &amp; Operations</li> <li>Authentication &amp; Authorization</li> <li>Testing Strategies</li> </ol> <p>Ideal for infrastructure and automation specialists.</p> <ol> <li>Version Control Workflows</li> <li>Container Fundamentals</li> <li>Kubernetes Operations</li> <li>CI/CD Pipeline Design</li> <li>Infrastructure as Code</li> </ol> <p>Focus on security integration and DevSecOps practices.</p> <ol> <li>Threat Modeling</li> <li>Secure Coding Practices</li> <li>Security Testing Tools</li> <li>Container Security</li> <li>Security Automation</li> </ol> <p>Comprehensive path covering both frontend and backend.</p> <ol> <li>Modern JavaScript/TypeScript</li> <li>API Development</li> <li>Database Integration</li> <li>Performance Optimization</li> <li>Deployment Strategies</li> </ol>"},{"location":"#featured-content","title":"\ud83d\udcda Featured Content","text":""},{"location":"#recently-updated","title":"Recently Updated","text":"<ul> <li>Kubernetes Security Best Practices</li> <li>FastAPI Performance Optimization</li> <li>GitHub Actions for DevSecOps</li> </ul>"},{"location":"#popular-resources","title":"Popular Resources","text":"<ul> <li>Docker Security Checklist</li> <li>SQL Query Optimization</li> <li>System Design Patterns</li> </ul>"},{"location":"#contributing","title":"\ud83e\udd1d Contributing","text":"<p>We welcome contributions! Check out our contribution guidelines to get started.</p> <p>Stay Updated</p> <p>Star our GitHub repository to stay updated with the latest content and improvements.</p>"},{"location":"glossary/","title":"Glossary","text":"<p>Key terms and definitions.</p>"},{"location":"architecture/","title":"Architecture","text":"<p>Software architecture concepts.</p>"},{"location":"backend/","title":"Backend Development Comprehensive Guide","text":""},{"location":"backend/#overview","title":"Overview","text":"<p>This comprehensive guide covers the essential aspects of backend development, from web frameworks and API design to databases, authentication, caching, and message queues. Each section provides practical knowledge and best practices for building robust, scalable backend systems.</p> <p>Guide Structure</p> <p>This guide is organized into six main sections covering the core components of modern backend development: Web Frameworks, API Design, Databases, Authentication &amp; Authorization, Caching, and Message Queues.</p>"},{"location":"backend/#web-frameworks","title":"Web Frameworks","text":"<p>Modern web frameworks provide the foundation for building scalable backend applications, offering built-in features for routing, middleware, dependency injection, and more.</p>"},{"location":"backend/#fastapi","title":"FastAPI","text":"<p>FastAPI is a modern, high-performance Python web framework for building APIs with automatic interactive documentation.</p> <p>Key Features: - High Performance: Based on Starlette and Pydantic, one of the fastest Python frameworks - Type Safety: Full Python type hints support with automatic validation - Automatic Documentation: Interactive API docs with Swagger UI and ReDoc - Async Support: Native async/await support for high concurrency</p> <pre><code>from fastapi import FastAPI, HTTPException\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\nclass User(BaseModel):\n    id: int\n    name: str\n    email: str\n\n@app.get(\"/users/{user_id}\")\nasync def get_user(user_id: int) -&gt; User:\n    if user_id not in users_db:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    return users_db[user_id]\n\n@app.post(\"/users/\")\nasync def create_user(user: User) -&gt; User:\n    users_db[user.id] = user\n    return user\n</code></pre> <p>FastAPI Best Practices</p> <ul> <li>Use Pydantic models for request/response validation</li> <li>Leverage dependency injection for database connections</li> <li>Implement proper error handling with HTTPException</li> <li>Use background tasks for non-blocking operations</li> </ul>"},{"location":"backend/#aspnet-core","title":"ASP.NET Core","text":"<p>ASP.NET Core is a cross-platform, high-performance framework for building modern web applications and APIs.</p> <p>Key Features: - Cross-Platform: Runs on Windows, Linux, and macOS - High Performance: Excellent throughput and low latency - Built-in DI: Comprehensive dependency injection container - Middleware Pipeline: Flexible request processing pipeline</p> <pre><code>[ApiController]\n[Route(\"api/[controller]\")]\npublic class UsersController : ControllerBase\n{\n    private readonly IUserService _userService;\n\n    public UsersController(IUserService userService)\n    {\n        _userService = userService;\n    }\n\n    [HttpGet(\"{id}\")]\n    public async Task&lt;ActionResult&lt;User&gt;&gt; GetUser(int id)\n    {\n        var user = await _userService.GetByIdAsync(id);\n        return user == null ? NotFound() : Ok(user);\n    }\n\n    [HttpPost]\n    public async Task&lt;ActionResult&lt;User&gt;&gt; CreateUser(CreateUserRequest request)\n    {\n        var user = await _userService.CreateAsync(request);\n        return CreatedAtAction(nameof(GetUser), new { id = user.Id }, user);\n    }\n}\n</code></pre>"},{"location":"backend/#gin-go","title":"Gin (Go)","text":"<p>Gin is a lightweight, high-performance HTTP web framework for Go with a martini-like API.</p> <p>Key Features: - Fast: Up to 40 times faster than other Go frameworks - Middleware Support: Rich middleware ecosystem - JSON Validation: Built-in JSON binding and validation - Error Management: Convenient error collection and management</p> <pre><code>package main\n\nimport (\n    \"net/http\"\n    \"github.com/gin-gonic/gin\"\n)\n\ntype User struct {\n    ID    int    `json:\"id\"`\n    Name  string `json:\"name\"`\n    Email string `json:\"email\"`\n}\n\nfunc main() {\n    r := gin.Default()\n\n    r.GET(\"/users/:id\", getUser)\n    r.POST(\"/users\", createUser)\n\n    r.Run(\":8080\")\n}\n\nfunc getUser(c *gin.Context) {\n    id := c.Param(\"id\")\n    // Fetch user logic here\n    c.JSON(http.StatusOK, gin.H{\"user\": user})\n}\n\nfunc createUser(c *gin.Context) {\n    var user User\n    if err := c.ShouldBindJSON(&amp;user); err != nil {\n        c.JSON(http.StatusBadRequest, gin.H{\"error\": err.Error()})\n        return\n    }\n    // Create user logic here\n    c.JSON(http.StatusCreated, user)\n}\n</code></pre> <p>Framework Comparison</p> Feature FastAPI ASP.NET Core Gin Language Python C# Go Performance High Very High Very High Learning Curve Low Medium Low Ecosystem Large Very Large Medium"},{"location":"backend/#api-design","title":"API Design","text":"<p>Effective API design is crucial for building maintainable, scalable, and user-friendly backend systems.</p>"},{"location":"backend/#restful-apis","title":"RESTful APIs","text":"<p>REST (Representational State Transfer) is an architectural style for designing networked applications using standard HTTP methods.</p> <p>Core Principles: - Stateless: Each request contains all information needed - Uniform Interface: Consistent API structure and naming - Resource-Based: URLs represent resources, not actions - HTTP Methods: Use appropriate HTTP verbs (GET, POST, PUT, DELETE)</p> <pre><code># RESTful API Examples\nGET    /api/users           # Get all users\nGET    /api/users/123       # Get specific user\nPOST   /api/users           # Create new user\nPUT    /api/users/123       # Update user (full replacement)\nPATCH  /api/users/123       # Partial update\nDELETE /api/users/123       # Delete user\n\n# Nested resources\nGET    /api/users/123/orders     # Get orders for user 123\nPOST   /api/users/123/orders     # Create order for user 123\n</code></pre> <p>Best Practices: - Use nouns for resource names, not verbs - Implement consistent error responses - Support filtering, sorting, and pagination - Version your APIs (<code>/api/v1/users</code>) - Use appropriate HTTP status codes</p>"},{"location":"backend/#graphql","title":"GraphQL","text":"<p>GraphQL is a query language and runtime for APIs that allows clients to request exactly the data they need.</p> <p>Key Benefits: - Flexible Queries: Clients specify exactly what data they need - Single Endpoint: One URL for all operations - Type System: Strong type system with schema - Real-time: Built-in subscription support</p> <pre><code># GraphQL Schema\ntype User {\n  id: ID!\n  name: String!\n  email: String!\n  posts: [Post!]!\n}\n\ntype Post {\n  id: ID!\n  title: String!\n  content: String!\n  author: User!\n}\n\ntype Query {\n  user(id: ID!): User\n  users(limit: Int, offset: Int): [User!]!\n}\n\ntype Mutation {\n  createUser(input: CreateUserInput!): User!\n  updateUser(id: ID!, input: UpdateUserInput!): User!\n}\n</code></pre> <pre><code># Example Query\nquery GetUser($userId: ID!) {\n  user(id: $userId) {\n    id\n    name\n    email\n    posts {\n      id\n      title\n    }\n  }\n}\n</code></pre>"},{"location":"backend/#grpc","title":"gRPC","text":"<p>gRPC is a high-performance RPC framework that uses Protocol Buffers for serialization.</p> <p>Advantages: - High Performance: Binary serialization with Protocol Buffers - Language Agnostic: Generate code for multiple languages - Streaming: Support for client, server, and bidirectional streaming - Built-in Load Balancing: Advanced load balancing strategies</p> <pre><code>// user.proto\nsyntax = \"proto3\";\n\npackage user;\n\nservice UserService {\n  rpc GetUser(GetUserRequest) returns (User);\n  rpc CreateUser(CreateUserRequest) returns (User);\n  rpc StreamUsers(StreamUsersRequest) returns (stream User);\n}\n\nmessage User {\n  int32 id = 1;\n  string name = 2;\n  string email = 3;\n}\n\nmessage GetUserRequest {\n  int32 id = 1;\n}\n</code></pre>"},{"location":"backend/#websockets","title":"WebSockets","text":"<p>WebSockets provide full-duplex communication channels over a single TCP connection, ideal for real-time applications.</p> <p>Use Cases: - Real-time chat applications - Live notifications - Collaborative editing - Gaming applications - Live data feeds</p> <pre><code>// WebSocket Server (Node.js)\nconst WebSocket = require('ws');\nconst wss = new WebSocket.Server({ port: 8080 });\n\nwss.on('connection', (ws) =&gt; {\n  console.log('Client connected');\n\n  ws.on('message', (message) =&gt; {\n    console.log('Received:', message);\n    // Broadcast to all clients\n    wss.clients.forEach((client) =&gt; {\n      if (client !== ws &amp;&amp; client.readyState === WebSocket.OPEN) {\n        client.send(message);\n      }\n    });\n  });\n\n  ws.on('close', () =&gt; {\n    console.log('Client disconnected');\n  });\n});\n</code></pre>"},{"location":"backend/#api-security","title":"API Security","text":"<p>Comprehensive security measures are essential for protecting APIs from various threats.</p> <p>Security Measures: - Authentication: Verify user identity (JWT, OAuth) - Authorization: Control access to resources (RBAC, ABAC) - Input Validation: Sanitize and validate all inputs - Rate Limiting: Prevent abuse and DoS attacks - HTTPS: Encrypt data in transit - CORS: Control cross-origin requests</p> <pre><code># API Security Example (FastAPI)\nfrom fastapi import FastAPI, Depends, HTTPException, status\nfrom fastapi.security import HTTPBearer, HTTPAuthorizationCredentials\nimport jwt\n\napp = FastAPI()\nsecurity = HTTPBearer()\n\ndef verify_token(credentials: HTTPAuthorizationCredentials = Depends(security)):\n    try:\n        payload = jwt.decode(credentials.credentials, SECRET_KEY, algorithms=['HS256'])\n        return payload\n    except jwt.ExpiredSignatureError:\n        raise HTTPException(status_code=401, detail=\"Token expired\")\n    except jwt.InvalidTokenError:\n        raise HTTPException(status_code=401, detail=\"Invalid token\")\n\n@app.get(\"/protected\")\nasync def protected_route(current_user: dict = Depends(verify_token)):\n    return {\"message\": f\"Hello, {current_user['username']}!\"}\n</code></pre>"},{"location":"backend/#api-documentation","title":"API Documentation","text":"<p>Comprehensive API documentation is crucial for API adoption and maintenance.</p> <p>Documentation Tools: - OpenAPI/Swagger: Interactive API documentation - Postman: API testing and documentation - Insomnia: API client and documentation - GitBook: Comprehensive documentation platform</p> <p>Documentation Best Practices</p> <ul> <li>Provide clear endpoint descriptions</li> <li>Include request/response examples</li> <li>Document error codes and responses</li> <li>Keep documentation up-to-date</li> <li>Provide code samples in multiple languages</li> </ul>"},{"location":"backend/#databases","title":"Databases","text":"<p>Databases are the backbone of most backend applications, storing and managing application data efficiently.</p>"},{"location":"backend/#relational-databases","title":"Relational Databases","text":""},{"location":"backend/#postgresql","title":"PostgreSQL","text":"<p>PostgreSQL is a powerful, open-source object-relational database system with advanced features.</p> <p>Key Features: - ACID Compliance: Full transaction support - Advanced Data Types: JSON, arrays, custom types - Extensibility: Custom functions, operators, and data types - Performance: Excellent query optimization and indexing</p> <pre><code>-- PostgreSQL Example\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(255) UNIQUE NOT NULL,\n    profile JSONB,\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- JSON operations\nSELECT name, profile-&gt;&gt;'location' as location\nFROM users\nWHERE profile @&gt; '{\"active\": true}';\n\n-- Advanced indexing\nCREATE INDEX CONCURRENTLY idx_users_email_gin \nON users USING gin(email gin_trgm_ops);\n</code></pre>"},{"location":"backend/#mysql","title":"MySQL","text":"<p>MySQL is a widely-used open-source relational database management system.</p> <p>Strengths: - Ease of Use: Simple setup and administration - Performance: Fast read operations - Replication: Built-in master-slave replication - Storage Engines: Multiple storage engines (InnoDB, MyISAM)</p> <pre><code>-- MySQL Example\nCREATE TABLE products (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10,2),\n    category_id INT,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    INDEX idx_category (category_id),\n    INDEX idx_price (price)\n) ENGINE=InnoDB;\n\n-- Optimization\nEXPLAIN SELECT * FROM products \nWHERE category_id = 1 AND price BETWEEN 10.00 AND 100.00;\n</code></pre>"},{"location":"backend/#sqlite","title":"SQLite","text":"<p>SQLite is a self-contained, serverless, zero-configuration database engine.</p> <p>Use Cases: - Development and testing - Small to medium applications - Mobile applications - Embedded systems</p> <pre><code>-- SQLite Example\nCREATE TABLE sessions (\n    id TEXT PRIMARY KEY,\n    user_id INTEGER NOT NULL,\n    data TEXT,\n    expires_at INTEGER,\n    FOREIGN KEY (user_id) REFERENCES users(id)\n);\n\n-- Full-text search\nCREATE VIRTUAL TABLE posts_fts USING fts5(title, content);\nINSERT INTO posts_fts SELECT title, content FROM posts;\nSELECT * FROM posts_fts WHERE posts_fts MATCH 'database optimization';\n</code></pre>"},{"location":"backend/#nosql-databases","title":"NoSQL Databases","text":""},{"location":"backend/#mongodb","title":"MongoDB","text":"<p>MongoDB is a document-oriented NoSQL database designed for scalability and flexibility.</p> <p>Key Features: - Document Storage: JSON-like document storage - Flexible Schema: Dynamic schema design - Horizontal Scaling: Built-in sharding support - Rich Query Language: Powerful query and aggregation framework</p> <pre><code>// MongoDB Example\n// Insert document\ndb.users.insertOne({\n  name: \"John Doe\",\n  email: \"john@example.com\",\n  profile: {\n    age: 30,\n    interests: [\"programming\", \"music\"],\n    address: {\n      city: \"New York\",\n      country: \"USA\"\n    }\n  },\n  createdAt: new Date()\n});\n\n// Complex aggregation\ndb.users.aggregate([\n  { $match: { \"profile.age\": { $gte: 18 } } },\n  { $group: { \n      _id: \"$profile.address.city\", \n      count: { $sum: 1 },\n      avgAge: { $avg: \"$profile.age\" }\n  } },\n  { $sort: { count: -1 } }\n]);\n</code></pre>"},{"location":"backend/#redis","title":"Redis","text":"<p>Redis is an in-memory data structure store used as a database, cache, and message broker.</p> <p>Data Structures: - Strings, Lists, Sets, Sorted Sets - Hashes, Bitmaps, HyperLogLogs - Streams, Geospatial indexes</p> <pre><code># Redis Examples\n# Caching user session\nSET session:123 \"user_data_json\" EX 3600\n\n# Rate limiting\nINCR rate_limit:user:456\nEXPIRE rate_limit:user:456 60\n\n# Pub/Sub messaging\nPUBLISH notifications \"New message for user 123\"\n\n# Sorted sets for leaderboards\nZADD leaderboard 1500 \"player1\" 2000 \"player2\"\nZREVRANGE leaderboard 0 9 WITHSCORES\n</code></pre>"},{"location":"backend/#elasticsearch","title":"Elasticsearch","text":"<p>Elasticsearch is a distributed search and analytics engine built on Apache Lucene.</p> <p>Use Cases: - Full-text search - Log and event data analysis - Real-time analytics - Application monitoring</p> <pre><code>// Elasticsearch Example\nPUT /products/_doc/1\n{\n  \"name\": \"Premium Laptop\",\n  \"category\": \"Electronics\",\n  \"price\": 1299.99,\n  \"description\": \"High-performance laptop for professionals\",\n  \"tags\": [\"laptop\", \"computer\", \"premium\"],\n  \"created_at\": \"2024-01-15T10:30:00Z\"\n}\n\n// Complex search query\nGET /products/_search\n{\n  \"query\": {\n    \"bool\": {\n      \"must\": [\n        { \"match\": { \"description\": \"laptop\" } }\n      ],\n      \"filter\": [\n        { \"range\": { \"price\": { \"gte\": 500, \"lte\": 2000 } } },\n        { \"term\": { \"category\": \"Electronics\" } }\n      ]\n    }\n  },\n  \"aggs\": {\n    \"price_ranges\": {\n      \"range\": {\n        \"field\": \"price\",\n        \"ranges\": [\n          { \"to\": 500 },\n          { \"from\": 500, \"to\": 1000 },\n          { \"from\": 1000 }\n        ]\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"backend/#database-operations","title":"Database Operations","text":""},{"location":"backend/#migrations","title":"Migrations","text":"<p>Database migrations manage schema changes over time in a version-controlled manner.</p> <pre><code># Django Migration Example\nfrom django.db import migrations, models\n\nclass Migration(migrations.Migration):\n    dependencies = [\n        ('myapp', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Product',\n            fields=[\n                ('id', models.AutoField(primary_key=True)),\n                ('name', models.CharField(max_length=255)),\n                ('price', models.DecimalField(max_digits=10, decimal_places=2)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n            ],\n        ),\n        migrations.AddField(\n            model_name='user',\n            name='last_login',\n            field=models.DateTimeField(null=True, blank=True),\n        ),\n    ]\n</code></pre>"},{"location":"backend/#backup-recovery","title":"Backup &amp; Recovery","text":"<p>Regular backups and tested recovery procedures are essential for data protection.</p> <pre><code># PostgreSQL Backup\npg_dump -h localhost -U postgres -d myapp &gt; backup_$(date +%Y%m%d).sql\n\n# MySQL Backup\nmysqldump -u root -p myapp &gt; backup_$(date +%Y%m%d).sql\n\n# MongoDB Backup\nmongodump --db myapp --out /backup/$(date +%Y%m%d)\n\n# Automated backup script\n#!/bin/bash\nBACKUP_DIR=\"/backups\"\nDATE=$(date +%Y%m%d_%H%M%S)\npg_dump -h $DB_HOST -U $DB_USER -d $DB_NAME | gzip &gt; $BACKUP_DIR/backup_$DATE.sql.gz\nfind $BACKUP_DIR -name \"backup_*.sql.gz\" -mtime +7 -delete\n</code></pre>"},{"location":"backend/#performance-tuning","title":"Performance Tuning","text":"<p>Database performance optimization involves query optimization, indexing, and configuration tuning.</p> <pre><code>-- Query optimization\nEXPLAIN ANALYZE SELECT u.name, COUNT(o.id) as order_count\nFROM users u\nLEFT JOIN orders o ON u.id = o.user_id\nWHERE u.created_at &gt;= '2024-01-01'\nGROUP BY u.id, u.name\nHAVING COUNT(o.id) &gt; 5;\n\n-- Index optimization\nCREATE INDEX CONCURRENTLY idx_users_created_at ON users(created_at);\nCREATE INDEX idx_orders_user_id_status ON orders(user_id, status);\n\n-- Partitioning (PostgreSQL)\nCREATE TABLE orders_2024 PARTITION OF orders\nFOR VALUES FROM ('2024-01-01') TO ('2025-01-01');\n</code></pre> <p>Performance Considerations</p> <ul> <li>Monitor slow queries regularly</li> <li>Use appropriate indexes but avoid over-indexing</li> <li>Consider query optimization before hardware scaling</li> <li>Implement connection pooling</li> <li>Use read replicas for read-heavy workloads</li> </ul>"},{"location":"backend/#authentication-authorization","title":"Authentication &amp; Authorization","text":"<p>Secure authentication and authorization are fundamental requirements for backend applications.</p>"},{"location":"backend/#jwt-json-web-tokens","title":"JWT (JSON Web Tokens)","text":"<p>JWT is a compact, self-contained way to securely transmit information between parties.</p> <p>Structure: - Header: Algorithm and token type - Payload: Claims (user data, permissions) - Signature: Verification signature</p> <pre><code>import jwt\nfrom datetime import datetime, timedelta\n\n# Generate JWT\ndef generate_token(user_id, username):\n    payload = {\n        'user_id': user_id,\n        'username': username,\n        'exp': datetime.utcnow() + timedelta(hours=24),\n        'iat': datetime.utcnow()\n    }\n    return jwt.encode(payload, SECRET_KEY, algorithm='HS256')\n\n# Verify JWT\ndef verify_token(token):\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=['HS256'])\n        return payload\n    except jwt.ExpiredSignatureError:\n        raise Exception(\"Token has expired\")\n    except jwt.InvalidTokenError:\n        raise Exception(\"Invalid token\")\n</code></pre>"},{"location":"backend/#oauth-20","title":"OAuth 2.0","text":"<p>OAuth 2.0 is an authorization framework that enables applications to obtain limited access to user accounts.</p> <p>Grant Types: - Authorization Code: Server-side applications - Client Credentials: Machine-to-machine authentication - Resource Owner Password: Trusted applications - Refresh Token: Token renewal</p> <pre><code># OAuth 2.0 Authorization Code Flow\nfrom authlib.integrations.flask_client import OAuth\n\noauth = OAuth(app)\ngoogle = oauth.register(\n    name='google',\n    client_id='your-client-id',\n    client_secret='your-client-secret',\n    server_metadata_url='https://accounts.google.com/.well-known/openid_configuration',\n    client_kwargs={\n        'scope': 'openid email profile'\n    }\n)\n\n@app.route('/login')\ndef login():\n    redirect_uri = url_for('auth', _external=True)\n    return google.authorize_redirect(redirect_uri)\n\n@app.route('/auth')\ndef auth():\n    token = google.authorize_access_token()\n    user = token.get('userinfo')\n    # Store user session\n    return redirect('/')\n</code></pre>"},{"location":"backend/#rbac-role-based-access-control","title":"RBAC (Role-Based Access Control)","text":"<p>RBAC restricts system access based on user roles and permissions.</p> <p>Components: - Users: Individual system users - Roles: Named job functions (admin, editor, viewer) - Permissions: Specific actions (read, write, delete) - Resources: Protected system resources</p> <pre><code># RBAC Implementation\nclass Permission:\n    def __init__(self, name, resource):\n        self.name = name\n        self.resource = resource\n\nclass Role:\n    def __init__(self, name):\n        self.name = name\n        self.permissions = []\n\n    def add_permission(self, permission):\n        self.permissions.append(permission)\n\nclass User:\n    def __init__(self, username):\n        self.username = username\n        self.roles = []\n\n    def add_role(self, role):\n        self.roles.append(role)\n\n    def has_permission(self, permission_name, resource):\n        for role in self.roles:\n            for permission in role.permissions:\n                if permission.name == permission_name and permission.resource == resource:\n                    return True\n        return False\n\n# Usage\nadmin_role = Role(\"admin\")\nadmin_role.add_permission(Permission(\"read\", \"users\"))\nadmin_role.add_permission(Permission(\"write\", \"users\"))\n\nuser = User(\"john_doe\")\nuser.add_role(admin_role)\n\n# Check permission\nif user.has_permission(\"write\", \"users\"):\n    # Allow action\n    pass\n</code></pre>"},{"location":"backend/#multi-factor-authentication-mfa","title":"Multi-factor Authentication (MFA)","text":"<p>MFA adds an extra layer of security by requiring multiple forms of verification.</p> <p>Common Factors: - Something you know: Password, PIN - Something you have: Phone, token, smart card - Something you are: Biometrics (fingerprint, face)</p> <pre><code>import pyotp\nimport qrcode\nfrom io import BytesIO\n\n# TOTP (Time-based One-Time Password)\ndef generate_secret():\n    return pyotp.random_base32()\n\ndef generate_qr_code(email, secret):\n    totp_uri = pyotp.totp.TOTP(secret).provisioning_uri(\n        email,\n        issuer_name=\"Your App\"\n    )\n\n    qr = qrcode.QRCode(version=1, box_size=10, border=5)\n    qr.add_data(totp_uri)\n    qr.make(fit=True)\n\n    img = qr.make_image(fill_color=\"black\", back_color=\"white\")\n    return img\n\ndef verify_totp(secret, token):\n    totp = pyotp.TOTP(secret)\n    return totp.verify(token, valid_window=1)\n</code></pre> <p>Authentication Best Practices</p> <ul> <li>Implement proper password hashing (bcrypt, Argon2)</li> <li>Use secure session management</li> <li>Implement account lockout policies</li> <li>Enable multi-factor authentication</li> <li>Regular security audits and penetration testing</li> </ul>"},{"location":"backend/#caching","title":"Caching","text":"<p>Caching improves application performance by storing frequently accessed data in fast storage layers.</p>"},{"location":"backend/#redis-caching","title":"Redis Caching","text":"<p>Redis is a popular choice for application caching due to its speed and rich data structures.</p> <p>Caching Patterns: - Cache-Aside: Application manages cache - Write-Through: Write to cache and database simultaneously - Write-Behind: Write to cache immediately, database later - Refresh-Ahead: Proactively refresh cache before expiration</p> <pre><code>import redis\nimport json\n\nredis_client = redis.Redis(host='localhost', port=6379, db=0)\n\n# Cache-aside pattern\ndef get_user(user_id):\n    cache_key = f\"user:{user_id}\"\n\n    # Try cache first\n    cached_user = redis_client.get(cache_key)\n    if cached_user:\n        return json.loads(cached_user)\n\n    # Fallback to database\n    user = database.get_user(user_id)\n    if user:\n        # Store in cache for 1 hour\n        redis_client.setex(cache_key, 3600, json.dumps(user))\n\n    return user\n\n# Cache invalidation\ndef update_user(user_id, user_data):\n    # Update database\n    database.update_user(user_id, user_data)\n\n    # Invalidate cache\n    cache_key = f\"user:{user_id}\"\n    redis_client.delete(cache_key)\n</code></pre>"},{"location":"backend/#memcached","title":"Memcached","text":"<p>Memcached is a distributed memory caching system designed for simplicity and speed.</p> <pre><code>import memcache\n\nmc = memcache.Client(['127.0.0.1:11211'], debug=0)\n\n# Basic operations\nmc.set(\"key\", \"value\", time=3600)  # Cache for 1 hour\nvalue = mc.get(\"key\")\n\n# Batch operations\nmc.set_multi({\n    \"user:1\": user1_data,\n    \"user:2\": user2_data\n}, time=1800)\n\nusers = mc.get_multi([\"user:1\", \"user:2\"])\n</code></pre>"},{"location":"backend/#cdn-content-delivery-network","title":"CDN (Content Delivery Network)","text":"<p>CDNs cache static content at geographically distributed edge locations.</p> <p>Benefits: - Reduced Latency: Content served from nearby locations - Reduced Bandwidth: Less load on origin servers - Improved Availability: Content remains available during outages - DDoS Protection: Built-in attack mitigation</p> <pre><code>// CDN Configuration Example (CloudFront)\n{\n  \"origins\": [{\n    \"domainName\": \"api.example.com\",\n    \"id\": \"api-origin\",\n    \"customOriginConfig\": {\n      \"httpPort\": 80,\n      \"httpsPort\": 443,\n      \"originProtocolPolicy\": \"https-only\"\n    }\n  }],\n  \"defaultCacheBehavior\": {\n    \"targetOriginId\": \"api-origin\",\n    \"viewerProtocolPolicy\": \"redirect-to-https\",\n    \"cachePolicyId\": \"custom-cache-policy\",\n    \"compress\": true\n  },\n  \"cacheBehaviors\": [{\n    \"pathPattern\": \"/api/static/*\",\n    \"targetOriginId\": \"api-origin\",\n    \"cachePolicyId\": \"static-content-policy\",\n    \"ttl\": 86400\n  }]\n}\n</code></pre>"},{"location":"backend/#application-caching","title":"Application Caching","text":"<p>Application-level caching stores computed results in memory to avoid expensive operations.</p> <pre><code>from functools import lru_cache\nimport time\n\n# Method-level caching\n@lru_cache(maxsize=128)\ndef expensive_computation(param):\n    # Simulate expensive operation\n    time.sleep(2)\n    return param * 2\n\n# Class-based caching\nclass ProductService:\n    def __init__(self):\n        self.cache = {}\n        self.cache_ttl = 300  # 5 minutes\n\n    def get_product_recommendations(self, user_id):\n        cache_key = f\"recommendations:{user_id}\"\n\n        if cache_key in self.cache:\n            cached_time, data = self.cache[cache_key]\n            if time.time() - cached_time &lt; self.cache_ttl:\n                return data\n\n        # Generate recommendations\n        recommendations = self._generate_recommendations(user_id)\n        self.cache[cache_key] = (time.time(), recommendations)\n\n        return recommendations\n</code></pre> <p>Caching Best Practices</p> <ul> <li>Identify bottlenecks before implementing caching</li> <li>Choose appropriate cache expiration times</li> <li>Implement cache invalidation strategies</li> <li>Monitor cache hit ratios</li> <li>Consider cache warming for critical data</li> </ul>"},{"location":"backend/#message-queues","title":"Message Queues","text":"<p>Message queues enable asynchronous communication between services, improving scalability and reliability.</p>"},{"location":"backend/#rabbitmq","title":"RabbitMQ","text":"<p>RabbitMQ is a feature-rich message broker that supports multiple messaging protocols.</p> <p>Key Concepts: - Producer: Sends messages - Queue: Stores messages - Consumer: Receives messages - Exchange: Routes messages to queues</p> <pre><code>import pika\n\n# Producer\nconnection = pika.BlockingConnection(pika.ConnectionParameters('localhost'))\nchannel = connection.channel()\n\n# Declare queue\nchannel.queue_declare(queue='task_queue', durable=True)\n\n# Send message\nmessage = json.dumps({'user_id': 123, 'action': 'send_email'})\nchannel.basic_publish(\n    exchange='',\n    routing_key='task_queue',\n    body=message,\n    properties=pika.BasicProperties(delivery_mode=2)  # Persistent message\n)\n\nconnection.close()\n\n# Consumer\ndef callback(ch, method, properties, body):\n    data = json.loads(body)\n    print(f\"Processing task: {data}\")\n\n    # Process the task\n    process_task(data)\n\n    # Acknowledge message\n    ch.basic_ack(delivery_tag=method.delivery_tag)\n\nchannel.basic_qos(prefetch_count=1)  # Fair dispatch\nchannel.basic_consume(queue='task_queue', on_message_callback=callback)\n\nprint('Waiting for messages. To exit press CTRL+C')\nchannel.start_consuming()\n</code></pre>"},{"location":"backend/#apache-kafka","title":"Apache Kafka","text":"<p>Kafka is a distributed streaming platform designed for high-throughput, fault-tolerant messaging.</p> <p>Use Cases: - Event streaming - Log aggregation - Real-time analytics - Microservices communication</p> <pre><code>from kafka import KafkaProducer, KafkaConsumer\nimport json\n\n# Producer\nproducer = KafkaProducer(\n    bootstrap_servers=['localhost:9092'],\n    value_serializer=lambda v: json.dumps(v).encode('utf-8'),\n    acks='all',\n    retries=3\n)\n\n# Send message\nproducer.send('user-events', {\n    'user_id': 123,\n    'event': 'login',\n    'timestamp': time.time()\n})\n\nproducer.flush()\n\n# Consumer\nconsumer = KafkaConsumer(\n    'user-events',\n    bootstrap_servers=['localhost:9092'],\n    value_deserializer=lambda m: json.loads(m.decode('utf-8')),\n    group_id='analytics-group',\n    enable_auto_commit=False\n)\n\nfor message in consumer:\n    event_data = message.value\n    print(f\"Processing event: {event_data}\")\n\n    # Process event\n    process_user_event(event_data)\n\n    # Manual commit\n    consumer.commit()\n</code></pre>"},{"location":"backend/#redis-pubsub","title":"Redis Pub/Sub","text":"<p>Redis Pub/Sub provides simple publish/subscribe messaging pattern.</p> <pre><code>import redis\n\nredis_client = redis.Redis(host='localhost', port=6379, db=0)\n\n# Publisher\ndef publish_notification(channel, message):\n    redis_client.publish(channel, json.dumps(message))\n\n# Subscriber\ndef message_handler(message):\n    if message['type'] == 'message':\n        data = json.loads(message['data'])\n        print(f\"Received notification: {data}\")\n        # Process notification\n        handle_notification(data)\n\n# Subscribe to channels\npubsub = redis_client.pubsub()\npubsub.subscribe('user-notifications', 'system-alerts')\n\n# Listen for messages\nfor message in pubsub.listen():\n    message_handler(message)\n</code></pre>"},{"location":"backend/#aws-sqs-simple-queue-service","title":"AWS SQS (Simple Queue Service)","text":"<p>AWS SQS is a fully managed message queuing service for decoupling and scaling microservices.</p> <p>Queue Types: - Standard Queues: High throughput, at-least-once delivery - FIFO Queues: Exactly-once processing, ordered delivery</p> <pre><code>import boto3\nimport json\n\n# Initialize SQS client\nsqs = boto3.client('sqs', region_name='us-east-1')\n\n# Send message\ndef send_message(queue_url, message_body):\n    response = sqs.send_message(\n        QueueUrl=queue_url,\n        MessageBody=json.dumps(message_body),\n        MessageAttributes={\n            'priority': {\n                'StringValue': 'high',\n                'DataType': 'String'\n            }\n        }\n    )\n    return response['MessageId']\n\n# Receive and process messages\ndef process_messages(queue_url):\n    while True:\n        response = sqs.receive_message(\n            QueueUrl=queue_url,\n            MaxNumberOfMessages=10,\n            WaitTimeSeconds=20,  # Long polling\n            MessageAttributeNames=['All']\n        )\n\n        messages = response.get('Messages', [])\n        for message in messages:\n            try:\n                # Process message\n                message_body = json.loads(message['Body'])\n                process_task(message_body)\n\n                # Delete message after successful processing\n                sqs.delete_message(\n                    QueueUrl=queue_url,\n                    ReceiptHandle=message['ReceiptHandle']\n                )\n\n            except Exception as e:\n                print(f\"Error processing message: {e}\")\n                # Message will become visible again for retry\n</code></pre> <p>Message Queue Comparison:</p> Feature RabbitMQ Apache Kafka Redis Pub/Sub AWS SQS Throughput High Very High High High Persistence Yes Yes No Yes Ordering Per queue Per partition No FIFO queues Delivery Guarantee At-least-once At-least-once At-most-once At-least-once Complexity Medium High Low Low Use Case Task queues Event streaming Real-time notifications Decoupling services <p>Message Queue Best Practices</p> <ul> <li>Design idempotent message handlers</li> <li>Implement proper error handling and retry logic</li> <li>Monitor queue depth and processing times</li> <li>Use dead letter queues for failed messages</li> <li>Consider message ordering requirements</li> </ul>"},{"location":"backend/#architecture-patterns","title":"Architecture Patterns","text":""},{"location":"backend/#microservices-architecture","title":"Microservices Architecture","text":"<p>Microservices architecture structures an application as a collection of loosely coupled, independently deployable services.</p> <p>Benefits: - Scalability: Scale individual services based on demand - Technology Diversity: Use different technologies per service - Team Autonomy: Independent development and deployment - Fault Isolation: Service failures don't cascade</p> <p>Challenges: - Complexity: Distributed system complexity - Network Latency: Inter-service communication overhead - Data Consistency: Managing distributed transactions - Monitoring: Observability across services</p> <pre><code># Docker Compose for Microservices\nversion: '3.8'\nservices:\n  user-service:\n    build: ./user-service\n    ports:\n      - \"3001:3000\"\n    environment:\n      - DB_HOST=user-db\n    depends_on:\n      - user-db\n\n  order-service:\n    build: ./order-service\n    ports:\n      - \"3002:3000\"\n    environment:\n      - DB_HOST=order-db\n      - USER_SERVICE_URL=http://user-service:3000\n    depends_on:\n      - order-db\n\n  api-gateway:\n    build: ./api-gateway\n    ports:\n      - \"8080:8080\"\n    environment:\n      - USER_SERVICE_URL=http://user-service:3000\n      - ORDER_SERVICE_URL=http://order-service:3000\n</code></pre>"},{"location":"backend/#event-driven-architecture","title":"Event-Driven Architecture","text":"<p>Event-driven architecture uses events to trigger and communicate between decoupled services.</p> <pre><code># Event-driven example\nfrom dataclasses import dataclass\nfrom typing import List, Callable\nimport json\nfrom datetime import datetime\n\n@dataclass\nclass Event:\n    event_type: str\n    data: dict\n    timestamp: datetime\n    correlation_id: str\n\nclass EventBus:\n    def __init__(self):\n        self.handlers: dict[str, List[Callable]] = {}\n\n    def subscribe(self, event_type: str, handler: Callable):\n        if event_type not in self.handlers:\n            self.handlers[event_type] = []\n        self.handlers[event_type].append(handler)\n\n    def publish(self, event: Event):\n        if event.event_type in self.handlers:\n            for handler in self.handlers[event.event_type]:\n                try:\n                    handler(event)\n                except Exception as e:\n                    print(f\"Error handling event: {e}\")\n\n# Usage\nevent_bus = EventBus()\n\n# Event handlers\ndef send_welcome_email(event: Event):\n    user_data = event.data\n    print(f\"Sending welcome email to {user_data['email']}\")\n\ndef update_analytics(event: Event):\n    print(f\"Recording user registration analytics\")\n\n# Subscribe handlers\nevent_bus.subscribe('user.registered', send_welcome_email)\nevent_bus.subscribe('user.registered', update_analytics)\n\n# Publish event\nuser_registered_event = Event(\n    event_type='user.registered',\n    data={'user_id': 123, 'email': 'user@example.com'},\n    timestamp=datetime.now(),\n    correlation_id='reg-123'\n)\n\nevent_bus.publish(user_registered_event)\n</code></pre>"},{"location":"backend/#monitoring-and-observability","title":"Monitoring and Observability","text":""},{"location":"backend/#logging","title":"Logging","text":"<p>Structured logging provides insights into application behavior and helps with debugging.</p> <pre><code>import logging\nimport json\nfrom datetime import datetime\n\n# Structured logging\nclass JSONFormatter(logging.Formatter):\n    def format(self, record):\n        log_entry = {\n            'timestamp': datetime.utcnow().isoformat(),\n            'level': record.levelname,\n            'message': record.getMessage(),\n            'module': record.module,\n            'function': record.funcName,\n            'line': record.lineno\n        }\n\n        if hasattr(record, 'user_id'):\n            log_entry['user_id'] = record.user_id\n        if hasattr(record, 'request_id'):\n            log_entry['request_id'] = record.request_id\n\n        return json.dumps(log_entry)\n\n# Configure logger\nlogger = logging.getLogger(__name__)\nhandler = logging.StreamHandler()\nhandler.setFormatter(JSONFormatter())\nlogger.addHandler(handler)\nlogger.setLevel(logging.INFO)\n\n# Usage\ndef process_order(order_id, user_id):\n    logger.info(\"Processing order\", extra={\n        'user_id': user_id,\n        'order_id': order_id,\n        'request_id': 'req-123'\n    })\n</code></pre>"},{"location":"backend/#metrics-and-monitoring","title":"Metrics and Monitoring","text":"<p>Application metrics help track performance and identify issues.</p> <pre><code>from prometheus_client import Counter, Histogram, Gauge, start_http_server\nimport time\n\n# Metrics\nREQUEST_COUNT = Counter('http_requests_total', 'Total HTTP requests', ['method', 'endpoint', 'status'])\nREQUEST_DURATION = Histogram('http_request_duration_seconds', 'HTTP request duration')\nACTIVE_USERS = Gauge('active_users_total', 'Number of active users')\n\n# Middleware for metrics collection\ndef metrics_middleware(app):\n    def middleware(request, response):\n        start_time = time.time()\n\n        # Process request\n        result = app(request, response)\n\n        # Record metrics\n        duration = time.time() - start_time\n        REQUEST_DURATION.observe(duration)\n        REQUEST_COUNT.labels(\n            method=request.method,\n            endpoint=request.path,\n            status=response.status_code\n        ).inc()\n\n        return result\n    return middleware\n\n# Start metrics server\nstart_http_server(8000)\n</code></pre>"},{"location":"backend/#health-checks","title":"Health Checks","text":"<p>Health checks ensure service availability and enable proper load balancing.</p> <pre><code>from fastapi import FastAPI, HTTPException\nimport redis\nimport psycopg2\n\napp = FastAPI()\n\n# Health check dependencies\ndef check_database():\n    try:\n        conn = psycopg2.connect(\n            host=\"localhost\",\n            database=\"myapp\",\n            user=\"user\",\n            password=\"password\"\n        )\n        conn.close()\n        return True\n    except:\n        return False\n\ndef check_redis():\n    try:\n        r = redis.Redis(host='localhost', port=6379, db=0)\n        r.ping()\n        return True\n    except:\n        return False\n\n@app.get(\"/health\")\nasync def health_check():\n    checks = {\n        'database': check_database(),\n        'redis': check_redis(),\n        'status': 'healthy'\n    }\n\n    if not all(checks.values()):\n        checks['status'] = 'unhealthy'\n        raise HTTPException(status_code=503, detail=checks)\n\n    return checks\n\n@app.get(\"/health/ready\")\nasync def readiness_check():\n    # Check if service is ready to handle requests\n    if not check_database():\n        raise HTTPException(status_code=503, detail=\"Database not ready\")\n    return {\"status\": \"ready\"}\n\n@app.get(\"/health/live\")\nasync def liveness_check():\n    # Basic liveness check\n    return {\"status\": \"alive\"}\n</code></pre>"},{"location":"backend/#security-best-practices","title":"Security Best Practices","text":""},{"location":"backend/#input-validation-and-sanitization","title":"Input Validation and Sanitization","text":"<pre><code>from pydantic import BaseModel, validator, EmailStr\nimport re\n\nclass UserRegistration(BaseModel):\n    username: str\n    email: EmailStr\n    password: str\n    age: int\n\n    @validator('username')\n    def validate_username(cls, v):\n        if not re.match(r'^[a-zA-Z0-9_]{3,20}, v):\n            raise ValueError('Username must be 3-20 characters, alphanumeric and underscore only')\n        return v\n\n    @validator('password')\n    def validate_password(cls, v):\n        if len(v) &lt; 8:\n            raise ValueError('Password must be at least 8 characters')\n        if not re.search(r'[A-Z]', v):\n            raise ValueError('Password must contain uppercase letter')\n        if not re.search(r'[a-z]', v):\n            raise ValueError('Password must contain lowercase letter')\n        if not re.search(r'\\d', v):\n            raise ValueError('Password must contain digit')\n        return v\n\n    @validator('age')\n    def validate_age(cls, v):\n        if v &lt; 13 or v &gt; 120:\n            raise ValueError('Age must be between 13 and 120')\n        return v\n</code></pre>"},{"location":"backend/#sql-injection-prevention","title":"SQL Injection Prevention","text":"<pre><code># Vulnerable code (DON'T DO THIS)\ndef get_user_bad(user_id):\n    query = f\"SELECT * FROM users WHERE id = {user_id}\"\n    cursor.execute(query)  # SQL injection vulnerability\n\n# Secure code (DO THIS)\ndef get_user_secure(user_id):\n    query = \"SELECT * FROM users WHERE id = %s\"\n    cursor.execute(query, (user_id,))  # Parameterized query\n\n# Using ORM (even better)\ndef get_user_orm(user_id):\n    return User.objects.get(id=user_id)  # ORM handles parameterization\n</code></pre>"},{"location":"backend/#rate-limiting","title":"Rate Limiting","text":"<pre><code>from flask import Flask, request, jsonify\nfrom flask_limiter import Limiter\nfrom flask_limiter.util import get_remote_address\nimport redis\n\napp = Flask(__name__)\n\n# Redis-based rate limiter\nlimiter = Limiter(\n    app,\n    key_func=get_remote_address,\n    storage_uri=\"redis://localhost:6379\",\n    default_limits=[\"1000 per day\", \"100 per hour\"]\n)\n\n@app.route(\"/api/login\", methods=[\"POST\"])\n@limiter.limit(\"5 per minute\")\ndef login():\n    # Login logic here\n    return jsonify({\"status\": \"success\"})\n\n@app.route(\"/api/register\", methods=[\"POST\"])\n@limiter.limit(\"3 per minute\")\ndef register():\n    # Registration logic here\n    return jsonify({\"status\": \"success\"})\n</code></pre>"},{"location":"backend/#performance-optimization","title":"Performance Optimization","text":""},{"location":"backend/#database-query-optimization","title":"Database Query Optimization","text":"<pre><code>-- Inefficient query\nSELECT u.*, p.title, p.content\nFROM users u\nJOIN posts p ON u.id = p.user_id\nWHERE u.created_at &gt; '2024-01-01';\n\n-- Optimized query\nSELECT u.id, u.name, u.email, p.title\nFROM users u\nJOIN posts p ON u.id = p.user_id\nWHERE u.created_at &gt; '2024-01-01'\nAND p.published = true\nORDER BY u.created_at\nLIMIT 100;\n\n-- Add appropriate indexes\nCREATE INDEX idx_users_created_at ON users(created_at);\nCREATE INDEX idx_posts_user_published ON posts(user_id, published);\n</code></pre>"},{"location":"backend/#connection-pooling","title":"Connection Pooling","text":"<pre><code>from sqlalchemy import create_engine\nfrom sqlalchemy.pool import QueuePool\n\n# Database connection pooling\nengine = create_engine(\n    'postgresql://user:password@localhost/dbname',\n    poolclass=QueuePool,\n    pool_size=20,\n    max_overflow=30,\n    pool_pre_ping=True,\n    pool_recycle=3600\n)\n\n# Redis connection pooling\nimport redis\n\nredis_pool = redis.ConnectionPool(\n    host='localhost',\n    port=6379,\n    db=0,\n    max_connections=100\n)\n\nredis_client = redis.Redis(connection_pool=redis_pool)\n</code></pre>"},{"location":"backend/#async-programming","title":"Async Programming","text":"<pre><code>import asyncio\nimport aiohttp\nimport aioredis\nfrom asyncpg import create_pool\n\nclass AsyncUserService:\n    def __init__(self):\n        self.db_pool = None\n        self.redis = None\n\n    async def initialize(self):\n        self.db_pool = await create_pool(\n            'postgresql://user:password@localhost/dbname',\n            min_size=10,\n            max_size=20\n        )\n        self.redis = await aioredis.create_redis_pool(\n            'redis://localhost:6379'\n        )\n\n    async def get_user(self, user_id):\n        # Try cache first\n        cached = await self.redis.get(f'user:{user_id}')\n        if cached:\n            return json.loads(cached)\n\n        # Fallback to database\n        async with self.db_pool.acquire() as conn:\n            row = await conn.fetchrow(\n                'SELECT * FROM users WHERE id = $1',\n                user_id\n            )\n            if row:\n                user_data = dict(row)\n                # Cache for 1 hour\n                await self.redis.setex(\n                    f'user:{user_id}',\n                    3600,\n                    json.dumps(user_data)\n                )\n                return user_data\n\n        return None\n\n    async def get_multiple_users(self, user_ids):\n        tasks = [self.get_user(user_id) for user_id in user_ids]\n        results = await asyncio.gather(*tasks)\n        return [result for result in results if result is not None]\n</code></pre>"},{"location":"backend/#testing-strategies","title":"Testing Strategies","text":""},{"location":"backend/#unit-testing","title":"Unit Testing","text":"<pre><code>import pytest\nfrom unittest.mock import Mock, patch\nfrom myapp.services import UserService\nfrom myapp.models import User\n\nclass TestUserService:\n    def setup_method(self):\n        self.mock_db = Mock()\n        self.user_service = UserService(self.mock_db)\n\n    def test_create_user_success(self):\n        # Arrange\n        user_data = {'name': 'John', 'email': 'john@example.com'}\n        expected_user = User(id=1, **user_data)\n        self.mock_db.save.return_value = expected_user\n\n        # Act\n        result = self.user_service.create_user(user_data)\n\n        # Assert\n        assert result.name == 'John'\n        assert result.email == 'john@example.com'\n        self.mock_db.save.assert_called_once()\n\n    def test_create_user_invalid_email(self):\n        # Arrange\n        user_data = {'name': 'John', 'email': 'invalid-email'}\n\n        # Act &amp; Assert\n        with pytest.raises(ValueError, match=\"Invalid email\"):\n            self.user_service.create_user(user_data)\n\n    @patch('myapp.services.send_email')\n    def test_create_user_sends_welcome_email(self, mock_send_email):\n        # Arrange\n        user_data = {'name': 'John', 'email': 'john@example.com'}\n        expected_user = User(id=1, **user_data)\n        self.mock_db.save.return_value = expected_user\n\n        # Act\n        self.user_service.create_user(user_data)\n\n        # Assert\n        mock_send_email.assert_called_once_with(\n            'john@example.com',\n            'Welcome to our platform!'\n        )\n</code></pre>"},{"location":"backend/#integration-testing","title":"Integration Testing","text":"<pre><code>import pytest\nfrom fastapi.testclient import TestClient\nfrom myapp.main import app\nfrom myapp.database import get_db\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\n\n# Test database setup\nSQLALCHEMY_DATABASE_URL = \"sqlite:///./test.db\"\nengine = create_engine(SQLALCHEMY_DATABASE_URL, connect_args={\"check_same_thread\": False})\nTestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\ndef override_get_db():\n    try:\n        db = TestingSessionLocal()\n        yield db\n    finally:\n        db.close()\n\napp.dependency_overrides[get_db] = override_get_db\n\nclient = TestClient(app)\n\nclass TestUserAPI:\n    def test_create_user(self):\n        user_data = {\n            \"name\": \"John Doe\",\n            \"email\": \"john@example.com\",\n            \"password\": \"SecurePass123\"\n        }\n\n        response = client.post(\"/users/\", json=user_data)\n\n        assert response.status_code == 201\n        data = response.json()\n        assert data[\"name\"] == \"John Doe\"\n        assert data[\"email\"] == \"john@example.com\"\n        assert \"id\" in data\n\n    def test_get_user(self):\n        # First create a user\n        user_data = {\"name\": \"Jane\", \"email\": \"jane@example.com\", \"password\": \"Pass123\"}\n        create_response = client.post(\"/users/\", json=user_data)\n        user_id = create_response.json()[\"id\"]\n\n        # Then get the user\n        response = client.get(f\"/users/{user_id}\")\n\n        assert response.status_code == 200\n        data = response.json()\n        assert data[\"name\"] == \"Jane\"\n        assert data[\"email\"] == \"jane@example.com\"\n\n    def test_get_nonexistent_user(self):\n        response = client.get(\"/users/99999\")\n        assert response.status_code == 404\n</code></pre>"},{"location":"backend/#deployment-and-devops","title":"Deployment and DevOps","text":""},{"location":"backend/#containerization-with-docker","title":"Containerization with Docker","text":"<pre><code># Multi-stage Dockerfile for Python application\nFROM python:3.11-slim as builder\n\nWORKDIR /app\n\n# Install system dependencies\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    build-essential \\\n    libpq-dev \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Install Python dependencies\nCOPY requirements.txt .\nRUN pip install --no-cache-dir --user -r requirements.txt\n\n# Production stage\nFROM python:3.11-slim\n\nWORKDIR /app\n\n# Install runtime dependencies\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    libpq5 \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Copy Python packages from builder stage\nCOPY --from=builder /root/.local /root/.local\n\n# Copy application code\nCOPY . .\n\n# Create non-root user\nRUN adduser --disabled-password --gecos '' appuser\nUSER appuser\n\n# Make sure scripts in .local are usable\nENV PATH=/root/.local/bin:$PATH\n\nEXPOSE 8000\n\nCMD [\"gunicorn\", \"--bind\", \"0.0.0.0:8000\", \"--workers\", \"4\", \"app:app\"]\n</code></pre>"},{"location":"backend/#cicd-pipeline","title":"CI/CD Pipeline","text":"<pre><code># .github/workflows/deploy.yml\nname: Deploy Backend Application\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    branches: [main]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    services:\n      postgres:\n        image: postgres:13\n        env:\n          POSTGRES_PASSWORD: postgres\n        options: &gt;-\n          --health-cmd pg_isready\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n\n      redis:\n        image: redis:7\n        options: &gt;-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.11'\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.txt\n          pip install pytest pytest-cov\n\n      - name: Run tests\n        env:\n          DATABASE_URL: postgresql://postgres:postgres@localhost/postgres\n          REDIS_URL: redis://localhost:6379\n        run: |\n          pytest --cov=app --cov-report=xml\n\n      - name: Upload coverage to Codecov\n        uses: codecov/codecov-action@v3\n\n  deploy:\n    needs: test\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/main'\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Configure AWS credentials\n        uses: aws-actions/configure-aws-credentials@v2\n        with:\n          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\n          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n          aws-region: us-east-1\n\n      - name: Login to Amazon ECR\n        id: login-ecr\n        uses: aws-actions/amazon-ecr-login@v1\n\n      - name: Build and push Docker image\n        env:\n          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}\n          ECR_REPOSITORY: backend-app\n          IMAGE_TAG: ${{ github.sha }}\n        run: |\n          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .\n          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG\n\n      - name: Deploy to ECS\n        run: |\n          aws ecs update-service --cluster production --service backend-service --force-new-deployment\n</code></pre>"},{"location":"backend/#summary","title":"Summary","text":"<p>This comprehensive guide covers the essential aspects of backend development:</p> <p>\ud83c\udf10 Web Frameworks: FastAPI, ASP.NET Core, and Gin provide robust foundations for building scalable APIs with their respective strengths in performance, type safety, and ecosystem support.</p> <p>\ud83d\udd0c API Design: RESTful APIs, GraphQL, gRPC, and WebSockets each serve different use cases, from traditional CRUD operations to real-time communication and high-performance RPC calls.</p> <p>\ud83d\udcbe Databases: Both relational (PostgreSQL, MySQL, SQLite) and NoSQL (MongoDB, Redis, Elasticsearch) databases offer unique advantages for different data storage and retrieval patterns.</p> <p>\ud83d\udd10 Security: Comprehensive authentication and authorization using JWT, OAuth 2.0, RBAC, and MFA ensures robust protection of backend resources.</p> <p>\u26a1 Performance: Effective caching strategies with Redis, Memcached, CDNs, and application-level caching significantly improve system performance and user experience.</p> <p>\ud83d\udce8 Messaging: Message queues like RabbitMQ, Kafka, Redis Pub/Sub, and AWS SQS enable asynchronous, scalable communication between services.</p> <p>Key Takeaway</p> <p>\"Modern backend development requires a comprehensive understanding of multiple technologies and patterns. The key is choosing the right tools for your specific use case while maintaining security, performance, and scalability as core principles.\"</p> <p>Next Steps: - Practice implementing these technologies in small projects - Focus on understanding the trade-offs between different approaches - Stay updated with evolving best practices and new technologies - Build monitoring and observability into your systems from the start - Always prioritize security and performance in your architectural decisions</p>"},{"location":"backend/api/","title":"API Design","text":"<p>Overview of API design principles and best practices.</p>"},{"location":"backend/api/documentation/","title":"API Documentation","text":"<p>How to document your APIs effectively.</p>"},{"location":"backend/api/graphql/","title":"GraphQL","text":"<p>Introduction to GraphQL API design and implementation.</p>"},{"location":"backend/api/grpc/","title":"gRPC","text":"<p>Introduction to gRPC API design and implementation.</p>"},{"location":"backend/api/rest/","title":"RESTful APIs","text":"<p>Introduction to RESTful API design and implementation.</p>"},{"location":"backend/api/security/","title":"API Security","text":"<p>Best practices for securing APIs.</p>"},{"location":"backend/api/websockets/","title":"WebSockets","text":"<p>Introduction to WebSockets and real-time communication.</p>"},{"location":"backend/aspnet-core/","title":"ASP.NET Core Overview","text":"<p>Main index for ASP.NET Core backend topics.</p>"},{"location":"backend/aspnet-core/ado-net/","title":"ADO.NET","text":"<p>Using ADO.NET for data access in ASP.NET Core.</p>"},{"location":"backend/aspnet-core/authentication/","title":"Authentication in ASP.NET Core","text":"<p>How to implement authentication in ASP.NET Core.</p>"},{"location":"backend/aspnet-core/authorization/","title":"Authorization in ASP.NET Core","text":"<p>How to implement authorization in ASP.NET Core.</p>"},{"location":"backend/aspnet-core/configuration/","title":"Configuration in ASP.NET Core","text":"<p>How to manage configuration in ASP.NET Core.</p>"},{"location":"backend/aspnet-core/dapper/","title":"Dapper","text":"<p>Using Dapper for data access in ASP.NET Core.</p>"},{"location":"backend/aspnet-core/data-access-tips/","title":"Data Access Tips","text":"<p>Tips for effective data access in ASP.NET Core.</p>"},{"location":"backend/aspnet-core/data-protection/","title":"Data Protection","text":"<p>Data protection strategies in ASP.NET Core.</p>"},{"location":"backend/aspnet-core/dependency-injection/","title":"Dependency Injection in ASP.NET Core","text":"<p>How to use dependency injection in ASP.NET Core.</p>"},{"location":"backend/aspnet-core/ef-core/","title":"Entity Framework Core","text":"<p>Using Entity Framework Core for data access in ASP.NET Core.</p>"},{"location":"backend/aspnet-core/entity-relationships/","title":"Entity Relationships","text":"<p>Managing entity relationships in ASP.NET Core.</p>"},{"location":"backend/aspnet-core/environments/","title":"Environments in ASP.NET Core","text":"<p>Working with environments in ASP.NET Core.</p>"},{"location":"backend/aspnet-core/getting-started/","title":"Getting Started with ASP.NET Core","text":"<p>Introduction and setup guide for ASP.NET Core.</p>"},{"location":"backend/aspnet-core/graphql-aspnetcore/","title":"GraphQL in ASP.NET Core","text":"<p>How to use GraphQL in ASP.NET Core applications.</p>"},{"location":"backend/aspnet-core/graphql-basics/","title":"GraphQL Basics","text":"<p>Basic concepts of GraphQL in ASP.NET Core.</p>"},{"location":"backend/aspnet-core/graphql-intro/","title":"Introduction to GraphQL","text":"<p>Introduction to GraphQL in ASP.NET Core.</p>"},{"location":"backend/aspnet-core/grpc-aspnetcore/","title":"gRPC in ASP.NET Core","text":"<p>How to use gRPC in ASP.NET Core applications.</p>"},{"location":"backend/aspnet-core/grpc-basics/","title":"gRPC Basics","text":"<p>Basic concepts of gRPC in ASP.NET Core.</p>"},{"location":"backend/aspnet-core/grpc-intro/","title":"Introduction to gRPC","text":"<p>Introduction to gRPC in ASP.NET Core.</p>"},{"location":"backend/aspnet-core/identity-framework/","title":"Identity Framework","text":"<p>Using the Identity Framework in ASP.NET Core.</p>"},{"location":"backend/aspnet-core/integration-testing/","title":"Integration Testing in ASP.NET Core","text":"<p>How to write integration tests for ASP.NET Core applications.</p>"},{"location":"backend/aspnet-core/logging/","title":"Logging in ASP.NET Core","text":"<p>Logging strategies and best practices in ASP.NET Core.</p>"},{"location":"backend/aspnet-core/middleware/","title":"Middleware in ASP.NET Core","text":"<p>Introduction to middleware in ASP.NET Core.</p>"},{"location":"backend/aspnet-core/routing/","title":"Routing in ASP.NET Core","text":"<p>Guide to routing in ASP.NET Core applications.</p>"},{"location":"backend/aspnet-core/security-best-practices/","title":"Security Best Practices","text":"<p>Security best practices for ASP.NET Core applications.</p>"},{"location":"backend/aspnet-core/signalr-aspnetcore/","title":"SignalR in ASP.NET Core","text":"<p>How to use SignalR in ASP.NET Core applications.</p>"},{"location":"backend/aspnet-core/signalr-basics/","title":"SignalR Basics","text":"<p>Basic concepts of SignalR in ASP.NET Core.</p>"},{"location":"backend/aspnet-core/signalr-intro/","title":"Introduction to SignalR","text":"<p>Introduction to SignalR in ASP.NET Core.</p>"},{"location":"backend/aspnet-core/unit-testing/","title":"Unit Testing in ASP.NET Core","text":"<p>How to write unit tests for ASP.NET Core applications.</p>"},{"location":"backend/auth/","title":"Authentication &amp; Authorization","text":"<p>Overview of authentication and authorization in backend systems.</p>"},{"location":"backend/auth/jwt/","title":"JWT","text":"<p>Introduction to JWT (JSON Web Tokens) for authentication.</p>"},{"location":"backend/auth/mfa/","title":"Multi-factor Auth","text":"<p>Introduction to multi-factor authentication (MFA).</p>"},{"location":"backend/auth/oauth2/","title":"OAuth 2.0","text":"<p>Introduction to OAuth 2.0 for secure authorization.</p>"},{"location":"backend/auth/rbac/","title":"RBAC","text":"<p>Role-Based Access Control (RBAC) concepts and implementation.</p>"},{"location":"backend/caching/","title":"Caching Overview","text":"<p>Introduction to caching strategies in backend systems.</p>"},{"location":"backend/caching/application/","title":"Application Caching","text":"<p>Application-level caching strategies and best practices.</p>"},{"location":"backend/caching/cdn/","title":"CDN","text":"<p>Using Content Delivery Networks (CDN) for caching and performance.</p>"},{"location":"backend/caching/memcached/","title":"Memcached","text":"<p>Using Memcached for caching in backend applications.</p>"},{"location":"backend/caching/redis/","title":"Redis Caching","text":"<p>Using Redis for caching in backend applications.</p>"},{"location":"backend/databases/","title":"Databases","text":"<p>Overview of database technologies for backend development.</p>"},{"location":"backend/databases/backup/","title":"Backup &amp; Recovery","text":"<p>Best practices for database backup and recovery.</p>"},{"location":"backend/databases/elasticsearch/","title":"Elasticsearch","text":"<p>Introduction to Elasticsearch for search and analytics.</p>"},{"location":"backend/databases/migrations/","title":"Migrations","text":"<p>How to manage database migrations.</p>"},{"location":"backend/databases/mongodb/","title":"MongoDB","text":"<p>Introduction to MongoDB as a NoSQL database.</p>"},{"location":"backend/databases/mysql/","title":"MySQL","text":"<p>Introduction to MySQL as a relational database.</p>"},{"location":"backend/databases/performance/","title":"Performance Tuning","text":"<p>Tips for tuning database performance.</p>"},{"location":"backend/databases/postgresql/","title":"PostgreSQL","text":"<p>Introduction to PostgreSQL as a relational database.</p>"},{"location":"backend/databases/redis/","title":"Redis","text":"<p>Introduction to Redis as a NoSQL database and cache.</p>"},{"location":"backend/databases/sqlite/","title":"SQLite","text":"<p>Introduction to SQLite as a relational database.</p>"},{"location":"backend/frameworks/","title":"Web Frameworks","text":"<p>Overview of popular backend web frameworks.</p>"},{"location":"backend/frameworks/aspnet-core/","title":"ASP.NET Core","text":"<p>Introduction and usage of ASP.NET Core framework.</p>"},{"location":"backend/frameworks/fastapi/","title":"FastAPI","text":"<p>Introduction and usage of FastAPI framework.</p>"},{"location":"backend/frameworks/gin/","title":"Gin","text":"<p>Introduction and usage of Gin framework.</p>"},{"location":"backend/messaging/","title":"Message Queues Overview","text":"<p>Introduction to message queues in backend systems.</p>"},{"location":"backend/messaging/aws-sqs/","title":"AWS SQS","text":"<p>Using AWS SQS for scalable message queuing.</p>"},{"location":"backend/messaging/kafka/","title":"Apache Kafka","text":"<p>Using Apache Kafka for distributed messaging.</p>"},{"location":"backend/messaging/rabbitmq/","title":"RabbitMQ","text":"<p>Using RabbitMQ for message queuing and communication.</p>"},{"location":"backend/messaging/redis-pubsub/","title":"Redis Pub/Sub","text":"<p>Using Redis Pub/Sub for lightweight messaging.</p>"},{"location":"best-practices/","title":"Best Practices","text":"<p>Best practices for software development.</p>"},{"location":"blog/","title":"Blog","text":""},{"location":"devops/","title":"DevOps","text":"<p>DevOps practices and tools.</p>"},{"location":"devsecops/","title":"DevSecOps","text":"<p>Security in DevOps (DevSecOps) topics.</p>"},{"location":"getting-started/best-practices/code-review-guidelines/","title":"Code Review Guidelines","text":"<p>Guidelines for conducting effective code reviews.</p>"},{"location":"getting-started/best-practices/development-practices/","title":"Development Best Practices","text":"<p>Key best practices for effective software development.</p>"},{"location":"getting-started/best-practices/error-handling/","title":"Error Handling","text":"<p>How to handle errors effectively in your code.</p>"},{"location":"getting-started/best-practices/logging/","title":"Logging Best Practices","text":"<p>Best practices for logging in software projects.</p>"},{"location":"getting-started/best-practices/performance-considerations/","title":"Performance Considerations","text":"<p>Tips for optimizing performance in your projects.</p>"},{"location":"getting-started/best-practices/security-basics/","title":"Security Basics","text":"<p>Fundamental security practices for developers.</p>"},{"location":"getting-started/code-quality/analysis/editorconfig/","title":"EditorConfig","text":"<p>How to use EditorConfig for code style consistency.</p>"},{"location":"getting-started/code-quality/analysis/formatters/","title":"Code Formatters","text":"<p>Using code formatters to maintain consistent style.</p>"},{"location":"getting-started/code-quality/analysis/linters/","title":"Code Linters","text":"<p>How to use code linters to improve code quality.</p>"},{"location":"getting-started/code-quality/analysis/sonarqube/","title":"SonarQube","text":"<p>Using SonarQube for code quality analysis.</p>"},{"location":"getting-started/code-quality/analysis/static-analysis/","title":"Static Analysis","text":"<p>Introduction to static code analysis tools.</p>"},{"location":"getting-started/code-quality/standards/code-organization/","title":"Code Organization","text":"<p>Best practices for organizing code in projects.</p>"},{"location":"getting-started/code-quality/standards/csharp-conventions/","title":"C# Coding Conventions","text":"<p>Guidelines and best practices for C# coding conventions.</p>"},{"location":"getting-started/code-quality/standards/documentation/","title":"Documentation Standards","text":"<p>How to document your code effectively.</p>"},{"location":"getting-started/code-quality/standards/naming-conventions/","title":"Naming Conventions","text":"<p>Standard naming conventions for codebases.</p>"},{"location":"getting-started/code-quality/testing/test-coverage/","title":"Test Coverage","text":"<p>Understanding and measuring test coverage.</p>"},{"location":"getting-started/code-quality/testing/testing-concepts/","title":"Testing Concepts","text":"<p>Fundamental concepts in software testing.</p>"},{"location":"getting-started/code-quality/testing/testing-frameworks/","title":"Testing Frameworks","text":"<p>Overview of popular testing frameworks.</p>"},{"location":"getting-started/code-quality/testing/unit-testing/","title":"Unit Testing","text":"<p>Introduction to unit testing and its importance.</p>"},{"location":"getting-started/fundamentals/client-server-architecture/","title":"Client-Server Architecture","text":"<p>This page describes the client-server architecture model and its importance in web development.</p>"},{"location":"getting-started/fundamentals/dns-domains/","title":"DNS and Domains","text":"<p>This page explains DNS, domain names, and how they are used to route traffic on the Internet.</p>"},{"location":"getting-started/fundamentals/how-web-works/","title":"How the Web Works","text":"<p>This page will explain how the web works, including the basics of web communication, protocols, and infrastructure.</p>"},{"location":"getting-started/fundamentals/internet-basics/","title":"Internet Basics","text":"<p>This page covers the fundamental concepts of the Internet, including its structure and key technologies.</p>"},{"location":"getting-started/fundamentals/web-standards/","title":"Web Standards","text":"<p>This page discusses web standards and their role in ensuring interoperability and accessibility.</p>"},{"location":"getting-started/project-management/build/build-systems/","title":"Build Systems","text":"<p>Overview of build systems and automation tools.</p>"},{"location":"getting-started/project-management/build/msbuild/","title":"MSBuild Basics","text":"<p>Introduction to MSBuild and its usage.</p>"},{"location":"getting-started/project-management/build/nuget-packages/","title":"NuGet Packages","text":"<p>Using NuGet for package management in .NET projects.</p>"},{"location":"getting-started/project-management/build/package-management/","title":"Package Management","text":"<p>How to manage packages in your projects.</p>"},{"location":"getting-started/project-management/lifecycle/agile-principles/","title":"Agile Principles","text":"<p>Introduction to Agile principles in software development.</p>"},{"location":"getting-started/project-management/lifecycle/documentation/","title":"Documentation","text":"<p>Best practices for project documentation.</p>"},{"location":"getting-started/project-management/lifecycle/issue-tracking/","title":"Issue Tracking","text":"<p>Tools and techniques for tracking issues in projects.</p>"},{"location":"getting-started/project-management/lifecycle/sprint-planning/","title":"Sprint Planning","text":"<p>How to plan sprints for Agile teams.</p>"},{"location":"getting-started/project-management/structure/configuration-files/","title":"Configuration Files","text":"<p>Managing configuration files in your projects.</p>"},{"location":"getting-started/project-management/structure/folder-structure/","title":"Folder Structure","text":"<p>Best practices for structuring project folders.</p>"},{"location":"getting-started/project-management/structure/project-templates/","title":"Project Templates","text":"<p>Using and creating project templates for consistency.</p>"},{"location":"getting-started/project-management/structure/solution-organization/","title":"Solution Organization","text":"<p>How to organize solutions and projects for maintainability.</p>"},{"location":"getting-started/setup/choosing-ide/","title":"Choosing an IDE","text":"<p>This page helps you choose the right IDE for your development needs.</p>"},{"location":"getting-started/setup/dotnet-sdk-installation/","title":"Installing .NET SDK","text":"<p>Instructions for installing the .NET SDK on your system.</p>"},{"location":"getting-started/setup/environment-variables/","title":"Environment Variables","text":"<p>This page explains environment variables and how to configure them for development.</p>"},{"location":"getting-started/setup/package-managers/","title":"Package Managers","text":"<p>This page introduces package managers and their use in software development.</p>"},{"location":"getting-started/setup/system-requirements/","title":"System Requirements","text":"<p>This page lists the system requirements for development tools and environments.</p>"},{"location":"getting-started/setup/workspace-setup/","title":"Setting Up Your Workspace","text":"<p>This page provides guidance on setting up your development workspace for productivity.</p>"},{"location":"getting-started/tools/cli/dotnet-cli/","title":".NET CLI","text":"<p>Guide to using the .NET CLI for building and managing .NET projects.</p>"},{"location":"getting-started/tools/cli/package-management/","title":"Package Management CLI","text":"<p>Command-line tools for managing packages in your projects.</p>"},{"location":"getting-started/tools/cli/powershell/","title":"PowerShell for Development","text":"<p>Using PowerShell for development tasks and automation.</p>"},{"location":"getting-started/tools/cli/terminal-basics/","title":"Terminal Basics","text":"<p>Introduction to terminal usage and essential commands for developers.</p>"},{"location":"getting-started/tools/debugging/breakpoints-watch/","title":"Breakpoints and Watch","text":"<p>How to use breakpoints and watch variables during debugging.</p>"},{"location":"getting-started/tools/debugging/debug-console/","title":"Debug Console","text":"<p>Using the debug console for troubleshooting and diagnostics.</p>"},{"location":"getting-started/tools/debugging/debugging-fundamentals/","title":"Debugging Fundamentals","text":"<p>Introduction to debugging concepts and tools.</p>"},{"location":"getting-started/tools/debugging/performance-profiling/","title":"Performance Profiling","text":"<p>How to profile application performance and identify bottlenecks.</p>"},{"location":"getting-started/tools/debugging/testing-tools/","title":"Testing Tools","text":"<p>Overview of testing tools available for developers.</p>"},{"location":"getting-started/tools/ides/configuration/","title":"Configuration and Customization","text":"<p>How to configure and customize your IDE for optimal workflow.</p>"},{"location":"getting-started/tools/ides/extensions/","title":"IDE Extensions","text":"<p>A guide to useful IDE extensions for productivity and code quality.</p>"},{"location":"getting-started/tools/ides/jetbrains-rider/","title":"JetBrains Rider","text":"<p>Overview and tips for using JetBrains Rider as your IDE.</p>"},{"location":"getting-started/tools/ides/visual-studio-2022/","title":"Visual Studio 2022","text":"<p>Overview and tips for using Visual Studio 2022 as your IDE.</p>"},{"location":"getting-started/tools/ides/visual-studio-code/","title":"Visual Studio Code","text":"<p>Overview and tips for using Visual Studio Code as your IDE.</p>"},{"location":"getting-started/version-control/git/basic-commands/","title":"Basic Git Commands","text":"<p>A guide to essential Git commands for daily development.</p>"},{"location":"getting-started/version-control/git/branching-merging/","title":"Branching and Merging","text":"<p>How to use branches and merge changes in Git.</p>"},{"location":"getting-started/version-control/git/git-configuration/","title":"Git Configuration","text":"<p>How to configure Git for your projects.</p>"},{"location":"getting-started/version-control/git/git-introduction/","title":"Introduction to Git","text":"<p>Learn the basics of Git and version control.</p>"},{"location":"getting-started/version-control/git/gitignore/","title":".gitignore Best Practices","text":"<p>Best practices for using .gitignore files in your repositories.</p>"},{"location":"getting-started/version-control/platforms/azure-devops/","title":"Azure DevOps","text":"<p>Introduction to using Azure DevOps for remote repositories.</p>"},{"location":"getting-started/version-control/platforms/github/","title":"GitHub Essentials","text":"<p>Introduction to using GitHub for remote repositories.</p>"},{"location":"getting-started/version-control/platforms/gitlab/","title":"GitLab Basics","text":"<p>Introduction to using GitLab for remote repositories.</p>"},{"location":"getting-started/version-control/platforms/repository-management/","title":"Repository Management","text":"<p>How to manage repositories on different platforms.</p>"},{"location":"getting-started/version-control/workflows/code-reviews/","title":"Code Reviews","text":"<p>Best practices for code reviews in collaborative projects.</p>"},{"location":"getting-started/version-control/workflows/feature-branch/","title":"Feature Branch Workflow","text":"<p>How to use the feature branch workflow in Git.</p>"},{"location":"getting-started/version-control/workflows/git-flow/","title":"Git Flow","text":"<p>Overview of the Git Flow collaboration workflow.</p>"},{"location":"getting-started/version-control/workflows/github-flow/","title":"GitHub Flow","text":"<p>Overview of the GitHub Flow collaboration workflow.</p>"},{"location":"getting-started/version-control/workflows/pull-requests/","title":"Pull Requests","text":"<p>How to create and manage pull requests in Git platforms.</p>"},{"location":"programming/","title":"Programming","text":"<p>[!abstract] Programming languages are formal systems for communicating instructions to computers. They enable us to build software, automate tasks, and solve problems efficiently.</p>"},{"location":"programming/#why-learn-programming-languages","title":"Why Learn Programming Languages?","text":"<ul> <li>Automate repetitive tasks</li> <li>Build applications and websites</li> <li>Analyze and process data</li> <li>Control hardware and devices</li> <li>Express logic and creativity</li> </ul> Popular ParadigmsKey Concepts <ul> <li>Imperative: Python, C, Java</li> <li>Object-Oriented: Java, C#, Python</li> <li>Functional: Haskell, F#, Scala</li> <li>Procedural: C, Go</li> <li>Scripting: JavaScript, Bash</li> <li>Logic: Prolog</li> </ul> <ul> <li>Syntax &amp; Semantics: Rules and meaning of code</li> <li>Data Types: Numbers, strings, collections, etc.</li> <li>Control Flow: Conditionals, loops</li> <li>Functions &amp; Procedures: Code reuse and modularity</li> <li>OOP: Classes, objects, inheritance</li> <li>Error Handling: Exceptions, assertions</li> <li>Type Systems: Static vs. dynamic typing</li> </ul>"},{"location":"programming/#example-hello-world-in-multiple-languages","title":"Example: Hello World in Multiple Languages","text":"PythonJavaScriptGoRust <pre><code>print(\"Hello, world!\")\n</code></pre> <pre><code>console.log(\"Hello, world!\");\n</code></pre> <pre><code>package main\nimport \"fmt\"\nfunc main() {\n    fmt.Println(\"Hello, world!\")\n}\n</code></pre> <pre><code>fn main() {\n    println!(\"Hello, world!\");\n}\n</code></pre> <p>[!tip] Explore the sidebar for language-specific guides, best practices, and code examples!</p>"},{"location":"programming/codeforces/introduction/","title":"Introduction to Codeforces","text":"<p>Overview and getting started with Codeforces.</p>"},{"location":"programming/codeforces/problems/","title":"Codeforces Problems","text":"<p>List and discussion of Codeforces problems.</p>"},{"location":"programming/codeforces/solutions/","title":"Codeforces Solutions","text":"<p>Selected solutions to Codeforces problems.</p>"},{"location":"programming/csharp-net/","title":"C# and .NET Programming Guide","text":"<p>Welcome to the comprehensive C# and .NET programming guide. This documentation covers everything from basic C# syntax to advanced .NET development concepts, organized in a progressive learning path.</p>"},{"location":"programming/csharp-net/#overview","title":"Overview","text":"<p>C# is a modern, object-oriented programming language developed by Microsoft as part of the .NET ecosystem. This guide provides structured learning materials for developers at all levels, from complete beginners to advanced practitioners.</p> <p>Learning Path</p> <p>This guide is organized into progressive sections, each building upon the previous one. Start with C# Basic if you're new to the language, or jump to specific sections based on your current knowledge level.</p>"},{"location":"programming/csharp-net/#course-structure","title":"Course Structure","text":""},{"location":"programming/csharp-net/#c-basic","title":"C# Basic","text":"<p>Prerequisites: None Duration: 4-6 weeks Target: Complete beginners to C# programming</p> <p>Foundation concepts including syntax, data types, control structures, and basic object-oriented programming principles.</p> <p>Getting Started</p> <p>Begin with \"Hello C#\" to set up your development environment and write your first C# program.</p>"},{"location":"programming/csharp-net/#c-intermediate","title":"C# Intermediate","text":"<p>Prerequisites: C# Basic completion Duration: 6-8 weeks Target: Developers with basic C# knowledge</p> <p>Advanced object-oriented concepts, generics, collections, LINQ fundamentals, and event-driven programming.</p> <p>Key Topics</p> <p>Focus on mastering OOP principles, interfaces, and generic programming before moving to advanced sections.</p>"},{"location":"programming/csharp-net/#c-advanced","title":"C# Advanced","text":"<p>Prerequisites: C# Intermediate completion Duration: 8-10 weeks Target: Experienced developers seeking mastery</p> <p>Concurrency, asynchronous programming, reflection, dynamic programming, and performance optimization techniques.</p> <p>Complexity Alert</p> <p>Advanced topics require solid understanding of intermediate concepts. Don't rush through prerequisite sections.</p>"},{"location":"programming/csharp-net/#net-framework-and-libraries","title":".NET Framework and Libraries","text":"<p>Prerequisites: C# Intermediate recommended Duration: 4-6 weeks Target: Developers building production applications</p> <p>Understanding the .NET ecosystem, framework libraries, packaging, deployment, and enterprise development patterns.</p>"},{"location":"programming/csharp-net/#data-and-linq","title":"Data and LINQ","text":"<p>Prerequisites: C# Intermediate completion Duration: 6-8 weeks Target: Developers working with data-driven applications</p> <p>Database operations, Entity Framework Core, advanced LINQ queries, and data serialization techniques.</p>"},{"location":"programming/csharp-net/#io-and-networking","title":"I/O and Networking","text":"<p>Prerequisites: C# Basic completion Duration: 4-6 weeks Target: Developers building networked applications</p> <p>File operations, network programming, HTTP services, and system integration capabilities.</p>"},{"location":"programming/csharp-net/#advanced-topics","title":"Advanced Topics","text":"<p>Prerequisites: C# Advanced recommended Duration: 6-8 weeks Target: Senior developers and architects</p> <p>Specialized topics including interoperability, performance tuning, cross-platform development, and system-level programming.</p>"},{"location":"programming/csharp-net/#learning-recommendations","title":"Learning Recommendations","text":""},{"location":"programming/csharp-net/#for-complete-beginners","title":"For Complete Beginners","text":"<ol> <li>Start with C# Basic section</li> <li>Practice each concept with hands-on exercises</li> <li>Complete all foundational topics before advancing</li> <li>Focus on understanding rather than speed</li> </ol>"},{"location":"programming/csharp-net/#for-experienced-programmers-new-to-c","title":"For Experienced Programmers (New to C#)","text":"<ol> <li>Review C# Basic quickly for syntax differences</li> <li>Focus on C# Intermediate for C#-specific features</li> <li>Dive deep into .NET Framework and Libraries</li> <li>Explore Advanced Topics based on your interests</li> </ol>"},{"location":"programming/csharp-net/#for-c-developers-expanding-knowledge","title":"For C# Developers (Expanding Knowledge)","text":"<ol> <li>Identify knowledge gaps using the structure outline</li> <li>Jump directly to relevant sections</li> <li>Use cross-references to understand dependencies</li> <li>Practice with real-world projects</li> </ol>"},{"location":"programming/csharp-net/#content-organization","title":"Content Organization","text":"<p>Each section includes:</p> <ul> <li>Conceptual explanations with clear examples</li> <li>Practical exercises to reinforce learning  </li> <li>Best practices and common pitfalls</li> <li>Real-world applications and use cases</li> <li>Further reading and external resources</li> </ul>"},{"location":"programming/csharp-net/#navigation-guide","title":"Navigation Guide","text":"<pre><code>C# and .NET/\n\u251c\u2500\u2500 C# Basic/           # Start here for beginners\n\u251c\u2500\u2500 C# Intermediate/    # OOP and core features  \n\u251c\u2500\u2500 C# Advanced/        # Complex topics and patterns\n\u251c\u2500\u2500 .NET Framework/     # Platform and libraries\n\u251c\u2500\u2500 Data and LINQ/      # Data access and queries\n\u251c\u2500\u2500 I/O and Networking/ # System integration\n\u2514\u2500\u2500 Advanced Topics/    # Specialized subjects\n</code></pre>"},{"location":"programming/csharp-net/#getting-help","title":"Getting Help","text":"<ul> <li>Each topic includes troubleshooting sections</li> <li>Code examples are tested and verified</li> <li>Common error messages are documented with solutions</li> <li>External resources are curated for additional learning</li> </ul>"},{"location":"programming/csharp-net/advanced-topics/code-analysis-and-metrics/","title":"Code Analysis and Metrics","text":"<p>Code analysis and metrics in .NET.</p>"},{"location":"programming/csharp-net/advanced-topics/cross-platform-development/","title":"Cross-Platform Development","text":"<p>Cross-platform development in .NET.</p>"},{"location":"programming/csharp-net/advanced-topics/diagnostics-and-profiling/","title":"Diagnostics and Profiling","text":"<p>Diagnostics and profiling in .NET.</p>"},{"location":"programming/csharp-net/advanced-topics/interoperability/","title":"Interoperability","text":"<p>Interoperability in .NET.</p>"},{"location":"programming/csharp-net/advanced-topics/native-com-interop/","title":"Native COM Interop","text":"<p>Native COM interoperability in .NET.</p>"},{"location":"programming/csharp-net/advanced-topics/performance-and-optimization/","title":"Performance and Optimization","text":"<p>Performance and optimization in .NET.</p>"},{"location":"programming/csharp-net/advanced-topics/platform-invoke/","title":"Platform Invoke (P/Invoke)","text":"<p>Platform Invoke (P/Invoke) in .NET.</p>"},{"location":"programming/csharp-net/advanced-topics/regular-expressions/","title":"Regular Expressions","text":"<p>Regular expressions in .NET.</p>"},{"location":"programming/csharp-net/csharp-advanced/advanced-generics/","title":"Advanced Generics","text":"<p>Advanced usage of generics in C#.</p>"},{"location":"programming/csharp-net/csharp-advanced/advanced-threading/","title":"Advanced Threading","text":"<p>Advanced threading techniques in C#.</p>"},{"location":"programming/csharp-net/csharp-advanced/async-and-await/","title":"Async and Await","text":"<p>Asynchronous programming with async and await in C#.</p>"},{"location":"programming/csharp-net/csharp-advanced/caller-info-attributes/","title":"Caller Info Attributes","text":"<p>Caller info attributes in C#.</p>"},{"location":"programming/csharp-net/csharp-advanced/concurrency-and-threading/","title":"Concurrency and Threading","text":"<p>Concurrency and threading in C#.</p>"},{"location":"programming/csharp-net/csharp-advanced/dynamic-programming/","title":"Dynamic Programming","text":"<p>Dynamic programming techniques in C#.</p>"},{"location":"programming/csharp-net/csharp-advanced/expressions-and-expression-trees/","title":"Expressions and Expression Trees","text":"<p>Expressions and expression trees in C#.</p>"},{"location":"programming/csharp-net/csharp-advanced/garbage-collection/","title":"Garbage Collection","text":"<p>Garbage collection in C#.</p>"},{"location":"programming/csharp-net/csharp-advanced/memory-management/","title":"Memory Management","text":"<p>Memory management in C#.</p>"},{"location":"programming/csharp-net/csharp-advanced/parallel-programming/","title":"Parallel Programming","text":"<p>Parallel programming in C#.</p>"},{"location":"programming/csharp-net/csharp-advanced/reflection-and-metadata/","title":"Reflection and Metadata","text":"<p>Reflection and metadata in C#.</p>"},{"location":"programming/csharp-net/csharp-advanced/source-generators/","title":"Source Generators","text":"<p>Source generators in C#.</p>"},{"location":"programming/csharp-net/csharp-advanced/span-and-memory/","title":"Span and Memory","text":"<p>Span and memory management in C#.</p>"},{"location":"programming/csharp-net/csharp-advanced/task-parallel-library/","title":"Task Parallel Library","text":"<p>Parallel programming with TPL in C#.</p>"},{"location":"programming/csharp-net/csharp-advanced/thread-synchronization/","title":"Thread Synchronization","text":"<p>Thread synchronization in C#.</p>"},{"location":"programming/csharp-net/csharp-advanced/unsafe-code-and-pointers/","title":"Unsafe Code and Pointers","text":"<p>Unsafe code and pointers in C#.</p>"},{"location":"programming/csharp-net/csharp-basic/arrays-and-collections/","title":"Arrays and Collections","text":"<p>Working with arrays and collections in C#.</p>"},{"location":"programming/csharp-net/csharp-basic/classes-and-objects/","title":"Classes and Objects","text":"<p>Object-oriented programming in C#.</p>"},{"location":"programming/csharp-net/csharp-basic/console-applications/","title":"Console Applications","text":"<p>Building console applications in C#.</p>"},{"location":"programming/csharp-net/csharp-basic/control-flow-and-exceptions/","title":"Control Flow and Exceptions","text":"<p>Control flow and exception handling in C#.</p>"},{"location":"programming/csharp-net/csharp-basic/csharp-language-basics/","title":"C# Language Basics","text":"<p>Basic syntax and structure of C#.</p>"},{"location":"programming/csharp-net/csharp-basic/data-types/","title":"Data Types","text":"<p>Common data types in C#.</p>"},{"location":"programming/csharp-net/csharp-basic/debugging-and-testing/","title":"Debugging and Testing","text":"<p>Debugging and testing in C#.</p>"},{"location":"programming/csharp-net/csharp-basic/dotnet-fundamentals/","title":".NET Fundamentals","text":"<p>Fundamental concepts of .NET.</p>"},{"location":"programming/csharp-net/csharp-basic/file-io-and-basic-streams/","title":"File I/O and Basic Streams","text":"<p>File input/output and streams in C#.</p>"},{"location":"programming/csharp-net/csharp-basic/hello-csharp/","title":"Hello C","text":"<ul> <li>Hello C#</li> <li>Understanding top-level programs</li> <li>Implicitly imported namespaces</li> <li>Project template names</li> </ul>"},{"location":"programming/csharp-net/csharp-basic/hello-csharp/#understanding-top-level-programs","title":"Understanding top-level programs","text":"<ul> <li><code>dotnet new console --use-program-main</code></li> </ul> <p><pre><code>using System;\nnamespace HelloCS\n{\n  class Program\n  {\n    static void Main(string[] args)\n    {\n      Console.WriteLine('Hello, World!');\n    }\n  }\n}\n</code></pre> - Key points to remember about\u00a0top-level programs include the following:   -   There can be only one file like this in a project.   -   Any\u00a0<code>using</code>\u00a0statements must be at the top of the file.   -   If you declare any classes or other types, they must be at the bottom of the file.   -   Although you should name the method\u00a0<code>Main</code>\u00a0if you explicitly define it, the method is named\u00a0<code>&lt;Main&gt;$</code>\u00a0when created by the compiler.</p>"},{"location":"programming/csharp-net/csharp-basic/hello-csharp/#implicitly-imported-namespaces","title":"Implicitly imported namespaces","text":""},{"location":"programming/csharp-net/csharp-basic/hello-csharp/#project-template-names","title":"Project template names","text":"Visual Studio 2022 dotnet new JetBrains Rider - Type Console App <code>console</code> Console Application Class Library <code>classlib</code> Class Library xUnit Test Project <code>xunit</code> Unit Test Project - xUnit ASP.NET Core Empty <code>web</code> ASP.NET Core Web Application - Empty Razor Class Library <code>razorclasslib</code> ASP.NET Core Web Application - Razor Class Library ASP.NET Core Web App (Model-View-Controller) <code>mvc</code> ASP.NET Core Web Application - Web App (Model-View-Controller) ASP.NET Core Web API <code>webapi</code> ASP.NET Core Web Application - Web API ASP.NET Core Web API (native AOT) <code>webapiaot</code> ASP.NET Core Web Application - Web API (native AOT) Blazor Web App <code>blazor</code> ASP.NET Core Web Application - Blazor Web App"},{"location":"programming/csharp-net/csharp-basic/introduction-csharp/","title":"Introduction C","text":"<p>Introduction to the C# language.</p>"},{"location":"programming/csharp-net/csharp-basic/methods-and-functions/","title":"Methods and Functions","text":"<p>Defining and using methods and functions in C#.</p>"},{"location":"programming/csharp-net/csharp-basic/strings-and-text-processing/","title":"Strings and Text Processing","text":"<p>Working with strings and text in C#.</p>"},{"location":"programming/csharp-net/csharp-basic/variables-and-operations/","title":"Variables and Operations","text":"<p>Working with variables and operations in C#.</p>"},{"location":"programming/csharp-net/csharp-intermediate/attributes-and-annotations/","title":"Attributes and Annotations","text":"<p>Attributes and annotations in C#.</p>"},{"location":"programming/csharp-net/csharp-intermediate/collections-framework/","title":"Collections Framework","text":"<p>Collections framework in C#.</p>"},{"location":"programming/csharp-net/csharp-intermediate/delegates-and-events/","title":"Delegates and Events","text":"<p>Delegates and events in C#.</p>"},{"location":"programming/csharp-net/csharp-intermediate/enums-and-constants/","title":"Enums and Constants","text":"<p>Enums and constants in C#.</p>"},{"location":"programming/csharp-net/csharp-intermediate/exception-handling/","title":"Exception Handling","text":"<p>Exception handling in C#.</p>"},{"location":"programming/csharp-net/csharp-intermediate/extension-methods/","title":"Extension Methods","text":"<p>Extension methods in C#.</p>"},{"location":"programming/csharp-net/csharp-intermediate/generics/","title":"Generics","text":"<p>Generics in C#.</p>"},{"location":"programming/csharp-net/csharp-intermediate/inheritance-and-polymorphism/","title":"Inheritance and Polymorphism","text":"<p>Inheritance and polymorphism in C#.</p>"},{"location":"programming/csharp-net/csharp-intermediate/interfaces-and-abstract-classes/","title":"Interfaces and Abstract Classes","text":"<p>Interfaces and abstract classes in C#.</p>"},{"location":"programming/csharp-net/csharp-intermediate/lambda-expressions/","title":"Lambda Expressions","text":"<p>Lambda expressions in C#.</p>"},{"location":"programming/csharp-net/csharp-intermediate/linq-basics/","title":"LINQ Basics","text":"<p>Introduction to LINQ in C#.</p>"},{"location":"programming/csharp-net/csharp-intermediate/nullable-types/","title":"Nullable Types","text":"<p>Nullable types in C#.</p>"},{"location":"programming/csharp-net/csharp-intermediate/object-oriented-programming/","title":"Object-Oriented Programming","text":"<p>OOP concepts in C#.</p>"},{"location":"programming/csharp-net/csharp-intermediate/pattern-matching/","title":"Pattern Matching","text":"<p>Pattern matching in C#.</p>"},{"location":"programming/csharp-net/csharp-intermediate/properties-and-indexers/","title":"Properties and Indexers","text":"<p>Properties and indexers in C#.</p>"},{"location":"programming/csharp-net/csharp-intermediate/structs-and-records/","title":"Structs and Records","text":"<p>Structs and records in C#.</p>"},{"location":"programming/csharp-net/data-and-linq/data-migrations/","title":"Data Migrations","text":"<p>Data migrations in .NET.</p>"},{"location":"programming/csharp-net/data-and-linq/database-models-and-relationships/","title":"Database Models and Relationships","text":"<p>Database models and relationships in .NET.</p>"},{"location":"programming/csharp-net/data-and-linq/entity-framework-core/","title":"Entity Framework Core","text":"<p>Entity Framework Core in .NET.</p>"},{"location":"programming/csharp-net/data-and-linq/json-processing/","title":"JSON Processing","text":"<p>Processing JSON in .NET.</p>"},{"location":"programming/csharp-net/data-and-linq/linq-fundamentals/","title":"LINQ Fundamentals","text":"<p>Fundamentals of LINQ in C#.</p>"},{"location":"programming/csharp-net/data-and-linq/linq-operators/","title":"LINQ Operators","text":"<p>LINQ operators in C#.</p>"},{"location":"programming/csharp-net/data-and-linq/linq-query-expressions/","title":"LINQ Query Expressions","text":"<p>LINQ query expressions in C#.</p>"},{"location":"programming/csharp-net/data-and-linq/linq-to-objects/","title":"LINQ to Objects","text":"<p>Using LINQ to Objects in C#.</p>"},{"location":"programming/csharp-net/data-and-linq/linq-to-xml/","title":"LINQ to XML","text":"<p>Using LINQ to XML in .NET.</p>"},{"location":"programming/csharp-net/data-and-linq/querying-and-updating-data/","title":"Querying and Updating Data","text":"<p>Querying and updating data in .NET.</p>"},{"location":"programming/csharp-net/data-and-linq/serialization-and-deserialization/","title":"Serialization and Deserialization","text":"<p>Serialization and deserialization in .NET.</p>"},{"location":"programming/csharp-net/data-and-linq/xml-processing/","title":"XML Processing","text":"<p>Processing XML in .NET.</p>"},{"location":"programming/csharp-net/dotnet-framework/application-domains/","title":"Application Domains","text":"<p>Application domains in .NET.</p>"},{"location":"programming/csharp-net/dotnet-framework/assemblies-and-loading/","title":"Assemblies and Loading","text":"<p>Assemblies and loading in .NET.</p>"},{"location":"programming/csharp-net/dotnet-framework/base-class-library/","title":"Base Class Library","text":"<p>Introduction to the .NET base class library.</p>"},{"location":"programming/csharp-net/dotnet-framework/configuration-management/","title":"Configuration Management","text":"<p>Configuration management in .NET.</p>"},{"location":"programming/csharp-net/dotnet-framework/cryptography/","title":"Cryptography","text":"<p>Cryptography in .NET.</p>"},{"location":"programming/csharp-net/dotnet-framework/dependency-injection/","title":"Dependency Injection","text":"<p>Dependency injection in .NET.</p>"},{"location":"programming/csharp-net/dotnet-framework/dotnet-overview/","title":".NET Overview","text":"<p>Overview of the .NET framework.</p>"},{"location":"programming/csharp-net/dotnet-framework/dotnet-standard-and-runtime/","title":".NET Standard and Runtime","text":"<p>.NET Standard and runtime details.</p>"},{"location":"programming/csharp-net/dotnet-framework/globalization-and-localization/","title":"Globalization and Localization","text":"<p>Globalization and localization in .NET.</p>"},{"location":"programming/csharp-net/dotnet-framework/logging-and-diagnostics/","title":"Logging and Diagnostics","text":"<p>Logging and diagnostics in .NET.</p>"},{"location":"programming/csharp-net/dotnet-framework/nuget-and-package-management/","title":"NuGet and Package Management","text":"<p>NuGet and package management in .NET.</p>"},{"location":"programming/csharp-net/dotnet-framework/packaging-and-distribution/","title":"Packaging and Distribution","text":"<p>Packaging and distributing .NET applications.</p>"},{"location":"programming/csharp-net/dotnet-framework/security/","title":"Security","text":"<p>Security in .NET.</p>"},{"location":"programming/csharp-net/io-and-networking/dns-and-network-utilities/","title":"DNS and Network Utilities","text":"<p>DNS and network utilities in .NET.</p>"},{"location":"programming/csharp-net/io-and-networking/email-and-smtp/","title":"Email and SMTP","text":"<p>Email and SMTP in .NET.</p>"},{"location":"programming/csharp-net/io-and-networking/file-system-operations/","title":"File System Operations","text":"<p>File system operations in .NET.</p>"},{"location":"programming/csharp-net/io-and-networking/http-client-and-server/","title":"HTTP Client and Server","text":"<p>HTTP client and server in .NET.</p>"},{"location":"programming/csharp-net/io-and-networking/memory-mapped-files/","title":"Memory-Mapped Files","text":"<p>Memory-mapped files in .NET.</p>"},{"location":"programming/csharp-net/io-and-networking/network-programming/","title":"Network Programming","text":"<p>Network programming in .NET.</p>"},{"location":"programming/csharp-net/io-and-networking/stream-adapters-and-compression/","title":"Stream Adapters and Compression","text":"<p>Stream adapters and compression in .NET.</p>"},{"location":"programming/csharp-net/io-and-networking/streams-and-io/","title":"Streams and I/O","text":"<p>Streams and input/output in .NET.</p>"},{"location":"programming/csharp-net/io-and-networking/tcp-and-udp-networking/","title":"TCP and UDP Networking","text":"<p>TCP and UDP networking in .NET.</p>"},{"location":"programming/leetcode/introduction/","title":"Introduction to Leetcode","text":"<p>Overview and getting started with Leetcode.</p>"},{"location":"programming/leetcode/patterns/","title":"Leetcode Patterns","text":"<p>Common patterns and techniques for solving Leetcode problems.</p>"},{"location":"programming/leetcode/solutions/","title":"Leetcode Solutions","text":"<p>Selected solutions to Leetcode problems.</p>"},{"location":"programming/python/","title":"Python","text":"<p>Overview of Python programming language.</p>"},{"location":"programming/python/built-in-data-types/","title":"Built-in Data Types","text":""},{"location":"programming/python/comprehensions-and-generators/","title":"Comprehensions and Generators","text":"<p>List comprehensions and generator expressions in Python.</p>"},{"location":"programming/python/conditionals-and-iteration/","title":"Conditionals and Iteration","text":"<p>Control flow with conditionals and loops in Python.</p>"},{"location":"programming/python/cryptography-and-tokens/","title":"Cryptography and Tokens","text":"<p>Cryptography and token management in Python.</p>"},{"location":"programming/python/debugging-and-profiling/","title":"Debugging and Profiling","text":"<p>Debugging and profiling Python code.</p>"},{"location":"programming/python/exceptions-and-context-managers/","title":"Exceptions and Context Managers","text":"<p>Error handling and context managers in Python.</p>"},{"location":"programming/python/files-and-data-persistence/","title":"Files and Data Persistence","text":"<p>Working with files and data persistence in Python.</p>"},{"location":"programming/python/functions/","title":"Functions","text":"<p>Defining and using functions in Python.</p>"},{"location":"programming/python/oop-decorators-iterators/","title":"OOP, Decorators, and Iterators","text":"<p>Object-oriented programming, decorators, and iterators in Python.</p>"},{"location":"programming/python/testing/","title":"Testing","text":"<p>Testing in Python.</p>"},{"location":"programming/python/type-hinting/","title":"Type Hinting","text":"<p>Type hinting in Python.</p>"},{"location":"programming/python/virtual-environments-and-packaging/","title":"Virtual Environments and Packaging","text":"<p>Managing virtual environments and packaging in Python.</p>"},{"location":"programming/sql/","title":"SQL Basic SELECT Statement","text":"<p>This guide covers the fundamental concepts of SQL SELECT statements, from basic queries to advanced filtering and ordering techniques.</p>"},{"location":"programming/sql/#basic-select-statement","title":"Basic SELECT Statement","text":"<p>To read data from a table, you use the <code>SELECT</code> statement. The most basic form retrieves all columns from a table:</p> <pre><code>SELECT * FROM customers;\n</code></pre> <p>The <code>SELECT</code> statement is the foundation of data retrieval in SQL and allows you to specify exactly what data you want to extract from your database.</p>"},{"location":"programming/sql/#case-sensitivity","title":"Case Sensitivity","text":"<p>The SQL language is case insensitive, meaning that you can write statements in upper or lower case. All of the following are equivalent:</p> <pre><code>-- Lowercase\nselect * from customers;\n\n-- Uppercase  \nSELECT * FROM CUSTOMERS;\n\n-- Mixed case\nSelect * From customers;\n</code></pre> <p>Best Practice</p> <p>While SQL is case insensitive, it's common practice to write SQL keywords in uppercase (SELECT, FROM, WHERE) and table/column names in lowercase for better readability.</p>"},{"location":"programming/sql/#spacing-and-formatting","title":"Spacing and Formatting","text":"<p>SQL is flexible with whitespace. These statements are functionally identical:</p> <pre><code>-- Compact format\nSELECT id,name FROM customers;\n\n-- Formatted for readability\nSELECT \n    id,\n    name \nFROM customers;\n\n-- Extra spacing\nSELECT     id    ,    name     FROM     customers    ;\n</code></pre>"},{"location":"programming/sql/#clause-ordering","title":"Clause Ordering","text":"<p>SQL statements must follow a specific order of clauses:</p> <ol> <li><code>SELECT</code> - specify columns</li> <li><code>FROM</code> - specify table(s)</li> <li><code>WHERE</code> - filter rows</li> <li><code>GROUP BY</code> - group rows</li> <li><code>HAVING</code> - filter groups</li> <li><code>ORDER BY</code> - sort results</li> <li><code>LIMIT</code> - limit number of results</li> </ol> <p>Historical Note</p> <p>The original proposed name for SQL was SEQUEL (Structured English Query Language), which explains why SQL reads like structured English.</p>"},{"location":"programming/sql/#semicolon","title":"Semicolon (;)","text":"<p>The semicolon marks the end of a SQL statement:</p> <pre><code>SELECT * FROM customers;\n</code></pre> <p>While optional in many database systems for single statements, it's required when executing multiple statements and is considered best practice to always include it.</p>"},{"location":"programming/sql/#selecting-specific-columns","title":"Selecting Specific Columns","text":"<p>Instead of using <code>SELECT *</code>, you can specify individual columns:</p> <pre><code>SELECT id, givenname, familyname FROM customers;\n</code></pre>"},{"location":"programming/sql/#benefits-of-specific-column-selection","title":"Benefits of Specific Column Selection","text":"<ul> <li>Performance: Reduces data transfer and memory usage</li> <li>Clarity: Makes your intent explicit</li> <li>Maintenance: Easier to understand and modify</li> <li>Security: Reduces exposure of sensitive data</li> </ul>"},{"location":"programming/sql/#column-order","title":"Column Order","text":"<p>The order of columns in your <code>SELECT</code> statement determines their order in the result set:</p> <pre><code>-- This order\nSELECT familyname, givenname, id FROM customers;\n\n-- Will display: familyname | givenname | id\n</code></pre>"},{"location":"programming/sql/#layout-and-formatting","title":"Layout and Formatting","text":"<p>For better readability, especially with many columns, use formatting:</p> <pre><code>SELECT \n    id,\n    givenname,\n    familyname,\n    email,\n    phone,\n    address\nFROM customers;\n</code></pre>"},{"location":"programming/sql/#using-select","title":"Using SELECT *","text":"<p>Best Practice Warning</p> <p>It is considered bad practice to use <code>SELECT *</code> in production code, even if you want all columns. Always specify columns explicitly.</p> <p>Problems with SELECT *:</p> <ul> <li>Performance: May retrieve unnecessary data</li> <li>Breaking changes: New columns can break applications</li> <li>Security: May expose sensitive data</li> <li>Clarity: Unclear what data is being used</li> </ul> <p>Instead of: <pre><code>SELECT * FROM customers;\n</code></pre></p> <p>Use: <pre><code>SELECT \n    id,\n    givenname,\n    familyname,\n    email,\n    phone\nFROM customers;\n</code></pre></p>"},{"location":"programming/sql/#calculated-columns","title":"Calculated Columns","text":"<p>You can perform calculations and create new columns in your results:</p> <pre><code>SELECT \n    id,\n    givenname,\n    familyname,\n    height,\n    height * 2.54 AS height_cm,\n    weight / 2.205 AS weight_kg\nFROM customers;\n</code></pre>"},{"location":"programming/sql/#common-calculations","title":"Common Calculations","text":"<pre><code>SELECT \n    product_name,\n    price,\n    quantity,\n    price * quantity AS total_value,\n    price * 1.1 AS price_with_tax\nFROM order_items;\n</code></pre>"},{"location":"programming/sql/#aliases","title":"Aliases","text":"<p>Aliases provide alternative names for columns or tables, making results more readable:</p>"},{"location":"programming/sql/#column-aliases","title":"Column Aliases","text":"<pre><code>SELECT \n    givenname AS first_name,\n    familyname AS last_name,\n    height/2.54 AS height_inches\nFROM customers;\n</code></pre>"},{"location":"programming/sql/#table-aliases","title":"Table Aliases","text":"<pre><code>SELECT \n    c.givenname,\n    c.familyname\nFROM customers AS c;\n-- or simply\nFROM customers c;\n</code></pre>"},{"location":"programming/sql/#comments","title":"Comments","text":"<p>SQL supports two types of comments for documenting your code.</p>"},{"location":"programming/sql/#single-line-comments","title":"Single Line Comments","text":"<p>Use <code>--</code> for single line comments:</p> <pre><code>SELECT \n    id,\n    givenname,        -- Customer's first name\n    familyname,       -- Customer's last name\n    height/2.54 AS inches  -- Convert cm to inches (1in = 2.54cm)\nFROM customers;       -- Main customer table\n</code></pre>"},{"location":"programming/sql/#block-comments","title":"Block Comments","text":"<p>Use <code>/* */</code> for multi-line comments:</p> <pre><code>/*\nThis query retrieves customer information\nwith height converted from centimeters to inches\nAuthor: Database Team\nDate: 2024-01-15\n*/\nSELECT \n    id,\n    givenname,\n    familyname,\n    height/2.54 AS inches\nFROM customers;\n</code></pre>"},{"location":"programming/sql/#filtering-rows","title":"Filtering Rows","text":"<p>Use the <code>WHERE</code> clause to filter rows based on conditions:</p> <pre><code>SELECT \n    id,\n    givenname,\n    familyname\nFROM customers\nWHERE age &gt;= 18;\n</code></pre>"},{"location":"programming/sql/#common-filter-operations","title":"Common Filter Operations","text":"<pre><code>-- Equality\nSELECT * FROM customers WHERE country = 'USA';\n\n-- Comparison operators\nSELECT * FROM customers WHERE age &gt; 21;\nSELECT * FROM customers WHERE salary &lt;= 50000;\n\n-- Multiple conditions\nSELECT * FROM customers WHERE age &gt;= 18 AND country = 'USA';\nSELECT * FROM customers WHERE status = 'active' OR status = 'pending';\n\n-- Pattern matching\nSELECT * FROM customers WHERE givenname LIKE 'John%';\n\n-- Range checking\nSELECT * FROM customers WHERE age BETWEEN 18 AND 65;\n\n-- List membership\nSELECT * FROM customers WHERE country IN ('USA', 'Canada', 'Mexico');\n</code></pre>"},{"location":"programming/sql/#ordering-the-results","title":"Ordering the Results","text":"<p>Use <code>ORDER BY</code> to sort your results:</p> <pre><code>SELECT \n    id,\n    givenname,\n    familyname\nFROM customers\nORDER BY familyname;\n</code></pre>"},{"location":"programming/sql/#sorting-options","title":"Sorting Options","text":"<pre><code>-- Ascending order (default)\nSELECT * FROM customers ORDER BY age ASC;\n\n-- Descending order\nSELECT * FROM customers ORDER BY age DESC;\n\n-- Multiple columns\nSELECT * FROM customers \nORDER BY familyname ASC, givenname ASC;\n\n-- Mixed sorting\nSELECT * FROM customers \nORDER BY country ASC, age DESC;\n</code></pre>"},{"location":"programming/sql/#distinct-rows","title":"Distinct Rows","text":"<p>Use <code>DISTINCT</code> to eliminate duplicate rows from your results:</p> <pre><code>SELECT DISTINCT country FROM customers;\n</code></pre>"},{"location":"programming/sql/#distinct-with-multiple-columns","title":"DISTINCT with Multiple Columns","text":"<pre><code>-- Returns unique combinations of country and state\nSELECT DISTINCT country, state FROM customers;\n</code></pre>"},{"location":"programming/sql/#count-with-distinct","title":"COUNT with DISTINCT","text":"<pre><code>-- Count unique countries\nSELECT COUNT(DISTINCT country) AS unique_countries FROM customers;\n</code></pre>"},{"location":"programming/sql/#complete-example","title":"Complete Example","text":"<p>Here's a comprehensive example combining multiple concepts:</p> <pre><code>/*\nQuery to get customer information with calculated fields\nFilters for adult customers in specific countries\nOrders by last name, then first name\n*/\nSELECT DISTINCT\n    c.id,\n    c.givenname AS first_name,\n    c.familyname AS last_name,\n    c.age,\n    c.height/2.54 AS height_inches,    -- Convert to inches\n    c.weight/2.205 AS weight_pounds,   -- Convert to pounds\n    c.country\nFROM customers AS c\nWHERE \n    c.age &gt;= 18                        -- Adults only\n    AND c.country IN ('USA', 'Canada', 'UK')\n    AND c.status = 'active'\nORDER BY \n    c.familyname ASC,\n    c.givenname ASC;\n</code></pre> <p>Learning Path</p> <p>Master these basic SELECT concepts before moving on to more advanced topics like JOINs, subqueries, and window functions. Practice with different combinations of clauses to build your confidence.</p>"},{"location":"programming/sql/#summary","title":"Summary","text":"<p>The SELECT statement is your primary tool for data retrieval in SQL. Key points to remember:</p> <ul> <li>Always specify columns instead of using <code>SELECT *</code></li> <li>Use meaningful aliases for clarity</li> <li>Comment your code for maintainability</li> <li>Follow consistent formatting and clause ordering</li> <li>Use filtering and sorting to get exactly the data you need</li> <li>Eliminate duplicates with DISTINCT when appropriate</li> </ul>"},{"location":"programming/sql/basic-sql/aggregating-data/","title":"Aggregating Data","text":"<p>How to aggregate data in SQL.</p>"},{"location":"programming/sql/basic-sql/calculating-column-value/","title":"How to Calculate Column Values in SQL","text":""},{"location":"programming/sql/basic-sql/calculating-column-value/#overview","title":"Overview","text":"<p>SQL provides powerful capabilities for performing calculations on column values, enabling you to create computed fields, aggregate data, and transform information directly within your queries. This documentation covers various methods to calculate and manipulate column values in SQL.</p> <p>Key Concept</p> <p>Calculated columns are expressions that derive their values from other columns or constants using mathematical operations, functions, or conditional logic.</p>"},{"location":"programming/sql/basic-sql/calculating-column-value/#basic-arithmetic-operations","title":"Basic Arithmetic Operations","text":""},{"location":"programming/sql/basic-sql/calculating-column-value/#mathematical-operators","title":"Mathematical Operators","text":"<p>SQL supports standard mathematical operators for numeric calculations:</p> Operator Description Example <code>+</code> Addition <code>price + tax</code> <code>-</code> Subtraction <code>end_date - start_date</code> <code>*</code> Multiplication <code>quantity * unit_price</code> <code>/</code> Division <code>total_sales / total_customers</code> <code>%</code> Modulo (remainder) <code>employee_id % 2</code>"},{"location":"programming/sql/basic-sql/calculating-column-value/#simple-calculations","title":"Simple Calculations","text":"<pre><code>-- Calculate total price including tax\nSELECT \n    product_name,\n    base_price,\n    tax_rate,\n    base_price * (1 + tax_rate) AS total_price\nFROM products;\n\n-- Calculate profit margin\nSELECT \n    product_name,\n    selling_price,\n    cost_price,\n    selling_price - cost_price AS profit,\n    ((selling_price - cost_price) / selling_price) * 100 AS profit_margin_percent\nFROM products;\n</code></pre> <p>Real-world Example</p> <pre><code>-- Calculate employee monthly salary from annual salary\nSELECT \n    employee_id,\n    first_name,\n    last_name,\n    annual_salary,\n    annual_salary / 12 AS monthly_salary,\n    annual_salary / 52 AS weekly_salary\nFROM employees;\n</code></pre>"},{"location":"programming/sql/basic-sql/calculating-column-value/#column-aliases","title":"Column Aliases","text":"<p>Always use meaningful aliases for calculated columns:</p> <pre><code>-- Good: Clear, descriptive aliases\nSELECT \n    customer_name,\n    order_total * 0.1 AS discount_amount,\n    order_total * 0.9 AS final_amount\nFROM orders;\n\n-- Avoid: Generic or unclear aliases\nSELECT \n    customer_name,\n    order_total * 0.1 AS calc1,\n    order_total * 0.9 AS result\nFROM orders;\n</code></pre>"},{"location":"programming/sql/basic-sql/calculating-column-value/#handling-null-values-in-calculations","title":"Handling NULL Values in Calculations","text":""},{"location":"programming/sql/basic-sql/calculating-column-value/#null-behavior","title":"NULL Behavior","text":"<p>NULL in Calculations</p> <p>Any arithmetic operation with NULL results in NULL. Always handle NULL values appropriately.</p> <pre><code>-- Problem: NULL values cause entire calculation to be NULL\nSELECT \n    product_name,\n    base_price + shipping_cost AS total_cost  -- NULL if shipping_cost is NULL\nFROM products;\n\n-- Solution: Use COALESCE or ISNULL to handle NULLs\nSELECT \n    product_name,\n    base_price + COALESCE(shipping_cost, 0) AS total_cost\nFROM products;\n</code></pre>"},{"location":"programming/sql/basic-sql/calculating-column-value/#database-specific-null-handling","title":"Database-Specific NULL Handling","text":"<pre><code>-- MySQL: Use IFNULL\nSELECT \n    product_name,\n    base_price + IFNULL(shipping_cost, 0) AS total_cost\nFROM products;\n\n-- SQL Server: Use ISNULL\nSELECT \n    product_name,\n    base_price + ISNULL(shipping_cost, 0) AS total_cost\nFROM products;\n\n-- PostgreSQL: Use COALESCE\nSELECT \n    product_name,\n    base_price + COALESCE(shipping_cost, 0) AS total_cost\nFROM products;\n</code></pre>"},{"location":"programming/sql/basic-sql/calculating-column-value/#string-calculations-and-concatenation","title":"String Calculations and Concatenation","text":""},{"location":"programming/sql/basic-sql/calculating-column-value/#string-concatenation","title":"String Concatenation","text":"<pre><code>-- Standard SQL: Use CONCAT function\nSELECT \n    CONCAT(first_name, ' ', last_name) AS full_name,\n    CONCAT('$', FORMAT(salary, 2)) AS formatted_salary\nFROM employees;\n\n-- Alternative: Concatenation operator (database-specific)\n-- PostgreSQL: Use ||\nSELECT first_name || ' ' || last_name AS full_name\nFROM employees;\n\n-- SQL Server: Use +\nSELECT first_name + ' ' + last_name AS full_name\nFROM employees;\n</code></pre>"},{"location":"programming/sql/basic-sql/calculating-column-value/#string-functions","title":"String Functions","text":"<pre><code>-- Calculate string lengths and manipulations\nSELECT \n    customer_name,\n    LENGTH(customer_name) AS name_length,\n    UPPER(customer_name) AS name_upper,\n    SUBSTRING(customer_name, 1, 3) AS name_abbreviation,\n    LEFT(customer_name, 1) AS first_initial\nFROM customers;\n</code></pre>"},{"location":"programming/sql/basic-sql/calculating-column-value/#date-and-time-calculations","title":"Date and Time Calculations","text":""},{"location":"programming/sql/basic-sql/calculating-column-value/#date-arithmetic","title":"Date Arithmetic","text":"<pre><code>-- Calculate age, duration, and date differences\nSELECT \n    employee_id,\n    first_name,\n    birth_date,\n    hire_date,\n    DATEDIFF(CURRENT_DATE, birth_date) / 365 AS age_years,\n    DATEDIFF(CURRENT_DATE, hire_date) AS days_employed,\n    TIMESTAMPDIFF(YEAR, hire_date, CURRENT_DATE) AS years_of_service\nFROM employees;\n</code></pre>"},{"location":"programming/sql/basic-sql/calculating-column-value/#addingsubtracting-time-periods","title":"Adding/Subtracting Time Periods","text":"<pre><code>-- Calculate future and past dates\nSELECT \n    order_id,\n    order_date,\n    DATE_ADD(order_date, INTERVAL 30 DAY) AS expected_delivery,\n    DATE_SUB(order_date, INTERVAL 7 DAY) AS order_deadline,\n    ADDDATE(order_date, 14) AS follow_up_date\nFROM orders;\n</code></pre> <p>Date Calculation Tips</p> <p>Different databases have varying date functions: - MySQL: <code>DATEDIFF()</code>, <code>DATE_ADD()</code>, <code>DATE_SUB()</code> - PostgreSQL: <code>AGE()</code>, <code>EXTRACT()</code>, <code>+ INTERVAL</code> - SQL Server: <code>DATEDIFF()</code>, <code>DATEADD()</code>, <code>DATEPART()</code></p>"},{"location":"programming/sql/basic-sql/calculating-column-value/#conditional-calculations-case-expressions","title":"Conditional Calculations (CASE Expressions)","text":""},{"location":"programming/sql/basic-sql/calculating-column-value/#basic-case-statements","title":"Basic CASE Statements","text":"<pre><code>-- Calculate bonuses based on performance\nSELECT \n    employee_id,\n    first_name,\n    salary,\n    performance_rating,\n    CASE \n        WHEN performance_rating &gt;= 9 THEN salary * 0.15\n        WHEN performance_rating &gt;= 7 THEN salary * 0.10\n        WHEN performance_rating &gt;= 5 THEN salary * 0.05\n        ELSE 0\n    END AS bonus_amount\nFROM employees;\n</code></pre>"},{"location":"programming/sql/basic-sql/calculating-column-value/#complex-conditional-logic","title":"Complex Conditional Logic","text":"<pre><code>-- Calculate shipping costs based on multiple conditions\nSELECT \n    order_id,\n    order_total,\n    shipping_distance,\n    customer_type,\n    CASE \n        WHEN customer_type = 'VIP' THEN 0\n        WHEN order_total &gt; 100 THEN 0\n        WHEN shipping_distance &lt;= 50 THEN 5.99\n        WHEN shipping_distance &lt;= 100 THEN 9.99\n        ELSE shipping_distance * 0.15\n    END AS shipping_cost\nFROM orders;\n</code></pre>"},{"location":"programming/sql/basic-sql/calculating-column-value/#aggregate-functions-and-calculations","title":"Aggregate Functions and Calculations","text":""},{"location":"programming/sql/basic-sql/calculating-column-value/#window-functions-for-calculations","title":"Window Functions for Calculations","text":"<pre><code>-- Calculate running totals and percentages\nSELECT \n    order_date,\n    daily_sales,\n    SUM(daily_sales) OVER (ORDER BY order_date) AS running_total,\n    daily_sales / SUM(daily_sales) OVER () * 100 AS percent_of_total,\n    LAG(daily_sales) OVER (ORDER BY order_date) AS previous_day_sales,\n    daily_sales - LAG(daily_sales) OVER (ORDER BY order_date) AS daily_change\nFROM daily_sales_summary\nORDER BY order_date;\n</code></pre>"},{"location":"programming/sql/basic-sql/calculating-column-value/#group-calculations","title":"Group Calculations","text":"<pre><code>-- Calculate department statistics\nSELECT \n    department,\n    COUNT(*) AS employee_count,\n    AVG(salary) AS avg_salary,\n    MAX(salary) AS max_salary,\n    MIN(salary) AS min_salary,\n    MAX(salary) - MIN(salary) AS salary_range,\n    STDDEV(salary) AS salary_std_dev\nFROM employees\nGROUP BY department;\n</code></pre>"},{"location":"programming/sql/basic-sql/calculating-column-value/#mathematical-functions","title":"Mathematical Functions","text":""},{"location":"programming/sql/basic-sql/calculating-column-value/#common-math-functions","title":"Common Math Functions","text":"<pre><code>-- Various mathematical calculations\nSELECT \n    product_id,\n    price,\n    ROUND(price, 2) AS rounded_price,\n    CEIL(price) AS price_ceiling,\n    FLOOR(price) AS price_floor,\n    ABS(price - 50) AS price_difference_from_50,\n    POWER(price, 2) AS price_squared,\n    SQRT(price) AS price_square_root,\n    LOG(price) AS natural_log_price\nFROM products\nWHERE price &gt; 0;\n</code></pre>"},{"location":"programming/sql/basic-sql/calculating-column-value/#statistical-functions","title":"Statistical Functions","text":"<pre><code>-- Calculate statistical measures\nSELECT \n    product_category,\n    COUNT(*) AS product_count,\n    AVG(price) AS mean_price,\n    STDDEV(price) AS std_deviation,\n    VARIANCE(price) AS price_variance,\n    PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY price) AS median_price\nFROM products\nGROUP BY product_category;\n</code></pre>"},{"location":"programming/sql/basic-sql/calculating-column-value/#advanced-calculation-techniques","title":"Advanced Calculation Techniques","text":""},{"location":"programming/sql/basic-sql/calculating-column-value/#subquery-calculations","title":"Subquery Calculations","text":"<pre><code>-- Calculate relative performance metrics\nSELECT \n    employee_id,\n    first_name,\n    salary,\n    (salary - (SELECT AVG(salary) FROM employees)) AS salary_vs_average,\n    (salary / (SELECT MAX(salary) FROM employees)) * 100 AS salary_as_percent_of_max\nFROM employees;\n</code></pre>"},{"location":"programming/sql/basic-sql/calculating-column-value/#correlated-subquery-calculations","title":"Correlated Subquery Calculations","text":"<pre><code>-- Calculate department rankings\nSELECT \n    e1.employee_id,\n    e1.first_name,\n    e1.department,\n    e1.salary,\n    (SELECT COUNT(*) \n     FROM employees e2 \n     WHERE e2.department = e1.department \n     AND e2.salary &gt; e1.salary) + 1 AS department_salary_rank\nFROM employees e1\nORDER BY e1.department, e1.salary DESC;\n</code></pre>"},{"location":"programming/sql/basic-sql/calculating-column-value/#data-type-conversions-in-calculations","title":"Data Type Conversions in Calculations","text":""},{"location":"programming/sql/basic-sql/calculating-column-value/#explicit-type-casting","title":"Explicit Type Casting","text":"<pre><code>-- Convert data types for calculations\nSELECT \n    order_id,\n    CAST(order_total AS DECIMAL(10,2)) AS decimal_total,\n    CAST(order_date AS CHAR(10)) AS date_string,\n    CONVERT(VARCHAR(20), order_total) AS total_string,\n    TRY_CAST(customer_rating AS INT) AS rating_integer\nFROM orders;\n</code></pre>"},{"location":"programming/sql/basic-sql/calculating-column-value/#implicit-conversions","title":"Implicit Conversions","text":"<pre><code>-- Be aware of automatic type conversions\nSELECT \n    product_id,\n    '$ ' + CAST(price AS VARCHAR(10)) AS formatted_price,  -- String concatenation\n    quantity * 1.0 AS decimal_quantity,                    -- Force decimal result\n    price / NULLIF(quantity, 0) AS price_per_unit         -- Avoid division by zero\nFROM order_items;\n</code></pre>"},{"location":"programming/sql/basic-sql/calculating-column-value/#performance-considerations","title":"Performance Considerations","text":""},{"location":"programming/sql/basic-sql/calculating-column-value/#indexing-calculated-columns","title":"Indexing Calculated Columns","text":"<p>Performance Optimization</p> <ul> <li>Create computed columns for frequently used calculations</li> <li>Index computed columns when used in WHERE clauses</li> <li>Consider materialized views for complex calculations</li> </ul> <pre><code>-- Create computed column (SQL Server example)\nALTER TABLE products \nADD total_cost AS (base_cost + shipping_cost + tax);\n\n-- Create index on computed column\nCREATE INDEX IX_products_total_cost ON products (total_cost);\n</code></pre>"},{"location":"programming/sql/basic-sql/calculating-column-value/#avoiding-expensive-operations","title":"Avoiding Expensive Operations","text":"<pre><code>-- Efficient: Pre-calculate constants\nSELECT \n    order_id,\n    order_total * 0.08 AS tax_amount  -- Good: constant multiplication\nFROM orders;\n\n-- Less efficient: Function calls in calculations\nSELECT \n    order_id,\n    order_total * (SELECT tax_rate FROM tax_settings WHERE region = 'US') AS tax_amount\nFROM orders;  -- Subquery executes for each row\n</code></pre>"},{"location":"programming/sql/basic-sql/calculating-column-value/#error-handling-in-calculations","title":"Error Handling in Calculations","text":""},{"location":"programming/sql/basic-sql/calculating-column-value/#division-by-zero","title":"Division by Zero","text":"<pre><code>-- Prevent division by zero errors\nSELECT \n    product_name,\n    total_sales,\n    units_sold,\n    CASE \n        WHEN units_sold = 0 THEN NULL\n        ELSE total_sales / units_sold\n    END AS average_sale_price,\n\n    -- Alternative using NULLIF\n    total_sales / NULLIF(units_sold, 0) AS avg_price_nullif\nFROM product_sales;\n</code></pre>"},{"location":"programming/sql/basic-sql/calculating-column-value/#overflow-handling","title":"Overflow Handling","text":"<pre><code>-- Handle potential numeric overflow\nSELECT \n    order_id,\n    quantity,\n    unit_price,\n    CASE \n        WHEN quantity &gt; 1000000 OR unit_price &gt; 1000000 THEN NULL\n        ELSE quantity * unit_price\n    END AS safe_total\nFROM order_items;\n</code></pre>"},{"location":"programming/sql/basic-sql/calculating-column-value/#common-calculation-patterns","title":"Common Calculation Patterns","text":""},{"location":"programming/sql/basic-sql/calculating-column-value/#financial-calculations","title":"Financial Calculations","text":"<pre><code>-- Calculate compound interest\nSELECT \n    account_id,\n    principal_amount,\n    interest_rate,\n    years,\n    principal_amount * POWER(1 + interest_rate, years) AS future_value,\n    principal_amount * POWER(1 + interest_rate, years) - principal_amount AS interest_earned\nFROM investments;\n</code></pre>"},{"location":"programming/sql/basic-sql/calculating-column-value/#percentage-calculations","title":"Percentage Calculations","text":"<pre><code>-- Calculate various percentage metrics\nSELECT \n    product_category,\n    current_sales,\n    previous_sales,\n    current_sales - previous_sales AS sales_change,\n    ((current_sales - previous_sales) / NULLIF(previous_sales, 0)) * 100 AS percent_change,\n    (current_sales / SUM(current_sales) OVER ()) * 100 AS percent_of_total\nFROM category_sales;\n</code></pre>"},{"location":"programming/sql/basic-sql/calculating-column-value/#ranking-and-scoring","title":"Ranking and Scoring","text":"<pre><code>-- Calculate normalized scores\nSELECT \n    student_id,\n    test_score,\n    (test_score - MIN(test_score) OVER ()) / \n    NULLIF(MAX(test_score) OVER () - MIN(test_score) OVER (), 0) * 100 AS normalized_score,\n    NTILE(10) OVER (ORDER BY test_score) AS decile_rank\nFROM test_results;\n</code></pre>"},{"location":"programming/sql/basic-sql/calculating-column-value/#best-practices","title":"Best Practices","text":"<p>Do's</p> <ul> <li>Always use meaningful aliases for calculated columns</li> <li>Handle NULL values explicitly in calculations</li> <li>Use appropriate data types to avoid overflow</li> <li>Consider performance impact of complex calculations</li> <li>Document complex calculation logic with comments</li> </ul> <p>Don'ts</p> <ul> <li>Don't ignore NULL value handling</li> <li>Don't perform unnecessary calculations in WHERE clauses</li> <li>Don't use magic numbers without explanation</li> <li>Don't chain multiple complex calculations without testing</li> <li>Don't forget to validate calculation results</li> </ul>"},{"location":"programming/sql/basic-sql/calculating-column-value/#database-specific-features","title":"Database-Specific Features","text":""},{"location":"programming/sql/basic-sql/calculating-column-value/#mysql-specific","title":"MySQL Specific","text":"<pre><code>-- MySQL-specific calculation functions\nSELECT \n    GREATEST(col1, col2, col3) AS max_value,\n    LEAST(col1, col2, col3) AS min_value,\n    IF(quantity &gt; 0, total/quantity, 0) AS avg_price\nFROM sales_data;\n</code></pre>"},{"location":"programming/sql/basic-sql/calculating-column-value/#postgresql-specific","title":"PostgreSQL Specific","text":"<pre><code>-- PostgreSQL-specific features\nSELECT \n    generate_series(1, 10) AS numbers,\n    random() * 100 AS random_percentage,\n    width_bucket(salary, 30000, 100000, 5) AS salary_bucket\nFROM employees;\n</code></pre>"},{"location":"programming/sql/basic-sql/calculating-column-value/#sql-server-specific","title":"SQL Server Specific","text":"<pre><code>-- SQL Server-specific calculations\nSELECT \n    IIF(quantity &gt; 0, total/quantity, 0) AS avg_price,\n    CHOOSE(rating, 'Poor', 'Fair', 'Good', 'Excellent') AS rating_text,\n    FORMAT(salary, 'C', 'en-US') AS formatted_salary\nFROM products;\n</code></pre>"},{"location":"programming/sql/basic-sql/calculating-column-value/#summary","title":"Summary","text":"<p>Column calculations in SQL provide powerful capabilities for data transformation and analysis. Key takeaways:</p> <ul> <li>Use arithmetic operators for basic mathematical operations</li> <li>Handle NULL values explicitly to avoid unexpected results</li> <li>Leverage CASE expressions for conditional calculations</li> <li>Apply window functions for advanced analytical calculations</li> <li>Consider performance implications of complex calculations</li> <li>Use appropriate data types and error handling</li> <li>Take advantage of database-specific functions when needed</li> </ul> <p>Remember</p> <p>\"Well-designed calculated columns can transform raw data into meaningful insights, but always validate your calculations and handle edge cases appropriately.\"</p>"},{"location":"programming/sql/basic-sql/example-database/","title":"Example databases","text":"<p>Sample databases for SQL practice.</p>"},{"location":"programming/sql/basic-sql/filtering-data/","title":"How to Filter Data in SQL Queries","text":"<p>Data filtering is one of the most fundamental and powerful features in SQL. The <code>WHERE</code> clause allows you to specify conditions that determine which rows are returned by your query. This comprehensive guide covers all aspects of filtering data in SQL queries.</p>"},{"location":"programming/sql/basic-sql/filtering-data/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Basic WHERE Clause</li> <li>Comparison Operators</li> <li>Logical Operators</li> <li>Pattern Matching with LIKE</li> <li>Range Filtering</li> <li>List Filtering</li> <li>NULL Value Handling</li> <li>Date and Time Filtering</li> <li>Advanced Filtering Techniques</li> <li>Performance Considerations</li> </ul>"},{"location":"programming/sql/basic-sql/filtering-data/#basic-where-clause","title":"Basic WHERE Clause","text":"<p>The <code>WHERE</code> clause filters rows based on specified conditions. It comes after the <code>FROM</code> clause and before <code>GROUP BY</code>, <code>HAVING</code>, <code>ORDER BY</code>, and <code>LIMIT</code>.</p>"},{"location":"programming/sql/basic-sql/filtering-data/#basic-syntax","title":"Basic Syntax","text":"<pre><code>SELECT column1, column2, ...\nFROM table_name\nWHERE condition;\n</code></pre>"},{"location":"programming/sql/basic-sql/filtering-data/#simple-examples","title":"Simple Examples","text":"<pre><code>-- Sample table structure for examples\n-- employees: id, first_name, last_name, department, salary, hire_date, age, email\n\n-- Filter by exact match\nSELECT first_name, last_name, salary\nFROM employees\nWHERE department = 'Marketing';\n\n-- Filter by numeric condition\nSELECT first_name, last_name, salary\nFROM employees\nWHERE salary &gt; 50000;\n\n-- Filter by date\nSELECT first_name, last_name, hire_date\nFROM employees\nWHERE hire_date &gt;= '2020-01-01';\n</code></pre>"},{"location":"programming/sql/basic-sql/filtering-data/#comparison-operators","title":"Comparison Operators","text":"<p>SQL provides various comparison operators for filtering data:</p> Operator Description Example <code>=</code> Equal to <code>salary = 50000</code> <code>&lt;&gt;</code> or <code>!=</code> Not equal to <code>department &lt;&gt; 'HR'</code> <code>&gt;</code> Greater than <code>age &gt; 30</code> <code>&lt;</code> Less than <code>salary &lt; 40000</code> <code>&gt;=</code> Greater than or equal <code>age &gt;= 25</code> <code>&lt;=</code> Less than or equal <code>salary &lt;= 60000</code>"},{"location":"programming/sql/basic-sql/filtering-data/#comparison-examples","title":"Comparison Examples","text":"<pre><code>-- Equal to\nSELECT * FROM employees WHERE department = 'Sales';\n\n-- Not equal to (two ways)\nSELECT * FROM employees WHERE department &lt;&gt; 'HR';\nSELECT * FROM employees WHERE department != 'HR';\n\n-- Greater than\nSELECT first_name, last_name, age\nFROM employees\nWHERE age &gt; 35;\n\n-- Less than or equal to\nSELECT first_name, last_name, salary\nFROM employees\nWHERE salary &lt;= 45000;\n\n-- Combining comparisons with different data types\nSELECT first_name, last_name, salary, hire_date\nFROM employees\nWHERE salary &gt;= 50000 AND hire_date &gt;= '2021-01-01';\n</code></pre>"},{"location":"programming/sql/basic-sql/filtering-data/#logical-operators","title":"Logical Operators","text":"<p>Combine multiple conditions using logical operators:</p>"},{"location":"programming/sql/basic-sql/filtering-data/#and-operator","title":"AND Operator","text":"<p>All conditions must be true:</p> <pre><code>-- Both conditions must be true\nSELECT first_name, last_name, department, salary\nFROM employees\nWHERE department = 'Engineering' AND salary &gt; 70000;\n\n-- Multiple AND conditions\nSELECT first_name, last_name, age, department, salary\nFROM employees\nWHERE age &gt;= 25 \n  AND age &lt;= 40 \n  AND department = 'Marketing' \n  AND salary &gt; 45000;\n</code></pre>"},{"location":"programming/sql/basic-sql/filtering-data/#or-operator","title":"OR Operator","text":"<p>At least one condition must be true:</p> <pre><code>-- Either condition can be true\nSELECT first_name, last_name, department\nFROM employees\nWHERE department = 'Sales' OR department = 'Marketing';\n\n-- Multiple OR conditions\nSELECT first_name, last_name, department, salary\nFROM employees\nWHERE salary &lt; 30000 \n   OR salary &gt; 80000 \n   OR department = 'Executive';\n</code></pre>"},{"location":"programming/sql/basic-sql/filtering-data/#not-operator","title":"NOT Operator","text":"<p>Negates a condition:</p> <pre><code>-- NOT with equality\nSELECT first_name, last_name, department\nFROM employees\nWHERE NOT department = 'HR';\n\n-- NOT with other operators\nSELECT first_name, last_name, salary\nFROM employees\nWHERE NOT salary &gt; 60000;  -- Same as salary &lt;= 60000\n\n-- NOT with complex conditions\nSELECT first_name, last_name, department, age\nFROM employees\nWHERE NOT (age &lt; 25 OR department = 'Intern');\n</code></pre>"},{"location":"programming/sql/basic-sql/filtering-data/#combining-logical-operators","title":"Combining Logical Operators","text":"<p>Use parentheses to control precedence:</p> <pre><code>-- Without parentheses - AND has higher precedence\nSELECT first_name, last_name, department, salary\nFROM employees\nWHERE department = 'Sales' OR department = 'Marketing' AND salary &gt; 50000;\n-- This means: Sales department OR (Marketing department AND salary &gt; 50000)\n\n-- With parentheses - clearer intention\nSELECT first_name, last_name, department, salary\nFROM employees\nWHERE (department = 'Sales' OR department = 'Marketing') AND salary &gt; 50000;\n-- This means: (Sales OR Marketing) AND salary &gt; 50000\n\n-- Complex example\nSELECT first_name, last_name, department, salary, age\nFROM employees\nWHERE (department = 'Engineering' AND salary &gt; 70000)\n   OR (department = 'Sales' AND age &lt; 30)\n   OR (department = 'Executive');\n</code></pre>"},{"location":"programming/sql/basic-sql/filtering-data/#pattern-matching-with-like","title":"Pattern Matching with LIKE","text":"<p>The <code>LIKE</code> operator enables pattern matching with wildcards:</p> <ul> <li><code>%</code> - Matches zero or more characters</li> <li><code>_</code> - Matches exactly one character</li> </ul>"},{"location":"programming/sql/basic-sql/filtering-data/#like-examples","title":"LIKE Examples","text":"<pre><code>-- Starts with 'John'\nSELECT first_name, last_name\nFROM employees\nWHERE first_name LIKE 'John%';\n\n-- Ends with 'son'\nSELECT first_name, last_name\nFROM employees\nWHERE last_name LIKE '%son';\n\n-- Contains 'tech'\nSELECT first_name, last_name, email\nFROM employees\nWHERE email LIKE '%tech%';\n\n-- Second character is 'a'\nSELECT first_name, last_name\nFROM employees\nWHERE first_name LIKE '_a%';\n\n-- Exactly 5 characters\nSELECT first_name, last_name\nFROM employees\nWHERE first_name LIKE '_____';\n\n-- Complex patterns\nSELECT first_name, last_name, email\nFROM employees\nWHERE email LIKE '%@company.com' \n  AND first_name LIKE 'J%';\n</code></pre>"},{"location":"programming/sql/basic-sql/filtering-data/#not-like","title":"NOT LIKE","text":"<pre><code>-- Does not start with 'A'\nSELECT first_name, last_name\nFROM employees\nWHERE first_name NOT LIKE 'A%';\n\n-- Does not contain 'temp'\nSELECT first_name, last_name, email\nFROM employees\nWHERE email NOT LIKE '%temp%';\n</code></pre>"},{"location":"programming/sql/basic-sql/filtering-data/#case-sensitivity","title":"Case Sensitivity","text":"<p>Database Specific Behavior</p> <p>LIKE behavior varies by database system: - MySQL: Case-insensitive by default (depends on collation) - PostgreSQL: Case-sensitive by default, use ILIKE for case-insensitive - SQL Server: Depends on collation settings</p> <pre><code>-- PostgreSQL case-insensitive pattern matching\nSELECT first_name, last_name\nFROM employees\nWHERE first_name ILIKE 'john%';\n\n-- Force case-insensitive in other databases\nSELECT first_name, last_name\nFROM employees\nWHERE UPPER(first_name) LIKE UPPER('john%');\n</code></pre>"},{"location":"programming/sql/basic-sql/filtering-data/#range-filtering","title":"Range Filtering","text":""},{"location":"programming/sql/basic-sql/filtering-data/#between-operator","title":"BETWEEN Operator","text":"<p>Filters values within a specified range (inclusive):</p> <pre><code>-- Numeric range\nSELECT first_name, last_name, salary\nFROM employees\nWHERE salary BETWEEN 40000 AND 60000;\n\n-- Age range\nSELECT first_name, last_name, age\nFROM employees\nWHERE age BETWEEN 25 AND 35;\n\n-- Date range\nSELECT first_name, last_name, hire_date\nFROM employees\nWHERE hire_date BETWEEN '2020-01-01' AND '2022-12-31';\n\n-- NOT BETWEEN\nSELECT first_name, last_name, salary\nFROM employees\nWHERE salary NOT BETWEEN 30000 AND 70000;\n</code></pre>"},{"location":"programming/sql/basic-sql/filtering-data/#equivalent-range-conditions","title":"Equivalent Range Conditions","text":"<pre><code>-- BETWEEN is equivalent to &gt;= AND &lt;=\n-- These two queries are identical:\n\nSELECT first_name, last_name, salary\nFROM employees\nWHERE salary BETWEEN 40000 AND 60000;\n\nSELECT first_name, last_name, salary\nFROM employees\nWHERE salary &gt;= 40000 AND salary &lt;= 60000;\n</code></pre>"},{"location":"programming/sql/basic-sql/filtering-data/#list-filtering","title":"List Filtering","text":""},{"location":"programming/sql/basic-sql/filtering-data/#in-operator","title":"IN Operator","text":"<p>Matches any value in a specified list:</p> <pre><code>-- Department list\nSELECT first_name, last_name, department\nFROM employees\nWHERE department IN ('Sales', 'Marketing', 'Engineering');\n\n-- Numeric list\nSELECT first_name, last_name, id\nFROM employees\nWHERE id IN (1, 5, 10, 15, 20);\n\n-- Mixed data types (same column type)\nSELECT first_name, last_name, department\nFROM employees\nWHERE department IN ('HR', 'Legal', 'Finance');\n\n-- NOT IN\nSELECT first_name, last_name, department\nFROM employees\nWHERE department NOT IN ('Intern', 'Contractor');\n</code></pre>"},{"location":"programming/sql/basic-sql/filtering-data/#in-vs-or","title":"IN vs OR","text":"<pre><code>-- These queries are equivalent:\n-- Using IN\nSELECT first_name, last_name, department\nFROM employees\nWHERE department IN ('Sales', 'Marketing', 'Engineering');\n\n-- Using OR\nSELECT first_name, last_name, department\nFROM employees\nWHERE department = 'Sales' \n   OR department = 'Marketing' \n   OR department = 'Engineering';\n</code></pre>"},{"location":"programming/sql/basic-sql/filtering-data/#subqueries-with-in","title":"Subqueries with IN","text":"<pre><code>-- Find employees in departments with more than 10 people\nSELECT first_name, last_name, department\nFROM employees\nWHERE department IN (\n    SELECT department \n    FROM employees \n    GROUP BY department \n    HAVING COUNT(*) &gt; 10\n);\n</code></pre>"},{"location":"programming/sql/basic-sql/filtering-data/#null-value-handling","title":"NULL Value Handling","text":"<p>NULL values require special handling in SQL:</p>"},{"location":"programming/sql/basic-sql/filtering-data/#is-null-and-is-not-null","title":"IS NULL and IS NOT NULL","text":"<pre><code>-- Find employees with no phone number\nSELECT first_name, last_name, phone\nFROM employees\nWHERE phone IS NULL;\n\n-- Find employees with phone numbers\nSELECT first_name, last_name, phone\nFROM employees\nWHERE phone IS NOT NULL;\n\n-- Complex NULL handling\nSELECT first_name, last_name, phone, email\nFROM employees\nWHERE phone IS NOT NULL AND email IS NOT NULL;\n</code></pre> <p>Common NULL Mistakes</p> <p>Never use <code>= NULL</code> or <code>&lt;&gt; NULL</code>. These will always return false because NULL cannot be compared using standard operators.</p> <pre><code>-- WRONG - This will return no results\nSELECT * FROM employees WHERE phone = NULL;\n\n-- CORRECT - This will find NULL phone numbers\nSELECT * FROM employees WHERE phone IS NULL;\n</code></pre>"},{"location":"programming/sql/basic-sql/filtering-data/#null-in-calculations","title":"NULL in Calculations","text":"<pre><code>-- NULL values in conditions\nSELECT first_name, last_name, bonus, salary\nFROM employees\nWHERE bonus IS NULL OR bonus = 0;\n\n-- Using COALESCE to handle NULLs\nSELECT first_name, last_name, \n       COALESCE(bonus, 0) as bonus_amount\nFROM employees\nWHERE COALESCE(bonus, 0) &gt; 5000;\n</code></pre>"},{"location":"programming/sql/basic-sql/filtering-data/#date-and-time-filtering","title":"Date and Time Filtering","text":""},{"location":"programming/sql/basic-sql/filtering-data/#date-comparisons","title":"Date Comparisons","text":"<pre><code>-- Exact date match\nSELECT first_name, last_name, hire_date\nFROM employees\nWHERE hire_date = '2021-06-15';\n\n-- Date range\nSELECT first_name, last_name, hire_date\nFROM employees\nWHERE hire_date &gt;= '2020-01-01' AND hire_date &lt; '2021-01-01';\n\n-- Recent hires (last 30 days)\nSELECT first_name, last_name, hire_date\nFROM employees\nWHERE hire_date &gt;= CURRENT_DATE - INTERVAL '30 days';  -- PostgreSQL\n-- WHERE hire_date &gt;= DATE_SUB(CURDATE(), INTERVAL 30 DAY);  -- MySQL\n-- WHERE hire_date &gt;= DATEADD(day, -30, GETDATE());  -- SQL Server\n</code></pre>"},{"location":"programming/sql/basic-sql/filtering-data/#date-functions-in-filtering","title":"Date Functions in Filtering","text":"<pre><code>-- Filter by year\nSELECT first_name, last_name, hire_date\nFROM employees\nWHERE EXTRACT(YEAR FROM hire_date) = 2021;  -- PostgreSQL\n-- WHERE YEAR(hire_date) = 2021;  -- MySQL/SQL Server\n\n-- Filter by month\nSELECT first_name, last_name, hire_date\nFROM employees\nWHERE EXTRACT(MONTH FROM hire_date) = 6;  -- PostgreSQL\n-- WHERE MONTH(hire_date) = 6;  -- MySQL/SQL Server\n\n-- Filter by day of week\nSELECT first_name, last_name, hire_date\nFROM employees\nWHERE EXTRACT(DOW FROM hire_date) = 1;  -- Monday in PostgreSQL\n-- WHERE DAYOFWEEK(hire_date) = 2;  -- Monday in MySQL\n</code></pre>"},{"location":"programming/sql/basic-sql/filtering-data/#time-and-timestamp-filtering","title":"Time and Timestamp Filtering","text":"<pre><code>-- Assuming login_timestamp column exists\n-- Filter by specific time range\nSELECT user_id, login_timestamp\nFROM user_logins\nWHERE login_timestamp BETWEEN '2023-12-01 09:00:00' AND '2023-12-01 17:00:00';\n\n-- Filter by time of day (PostgreSQL)\nSELECT user_id, login_timestamp\nFROM user_logins\nWHERE EXTRACT(HOUR FROM login_timestamp) BETWEEN 9 AND 17;\n\n-- Recent activity (last hour)\nSELECT user_id, login_timestamp\nFROM user_logins\nWHERE login_timestamp &gt;= NOW() - INTERVAL '1 hour';  -- PostgreSQL\n-- WHERE login_timestamp &gt;= NOW() - INTERVAL 1 HOUR;  -- MySQL\n</code></pre>"},{"location":"programming/sql/basic-sql/filtering-data/#advanced-filtering-techniques","title":"Advanced Filtering Techniques","text":""},{"location":"programming/sql/basic-sql/filtering-data/#filtering-with-aggregate-functions-having","title":"Filtering with Aggregate Functions (HAVING)","text":"<p>Use <code>HAVING</code> to filter groups after <code>GROUP BY</code>:</p> <pre><code>-- Find departments with average salary &gt; 60000\nSELECT department, AVG(salary) as avg_salary, COUNT(*) as employee_count\nFROM employees\nGROUP BY department\nHAVING AVG(salary) &gt; 60000;\n\n-- Departments with more than 5 employees and high average age\nSELECT department, AVG(age) as avg_age, COUNT(*) as employee_count\nFROM employees\nGROUP BY department\nHAVING COUNT(*) &gt; 5 AND AVG(age) &gt; 30;\n</code></pre>"},{"location":"programming/sql/basic-sql/filtering-data/#filtering-with-window-functions","title":"Filtering with Window Functions","text":"<pre><code>-- Find employees with above-average salary in their department\nSELECT first_name, last_name, department, salary,\n       AVG(salary) OVER (PARTITION BY department) as dept_avg_salary\nFROM employees\nWHERE salary &gt; (\n    SELECT AVG(salary) \n    FROM employees e2 \n    WHERE e2.department = employees.department\n);\n\n-- Using window functions with filtering\nWITH ranked_employees AS (\n    SELECT first_name, last_name, department, salary,\n           ROW_NUMBER() OVER (PARTITION BY department ORDER BY salary DESC) as salary_rank\n    FROM employees\n)\nSELECT first_name, last_name, department, salary\nFROM ranked_employees\nWHERE salary_rank &lt;= 3;  -- Top 3 earners per department\n</code></pre>"},{"location":"programming/sql/basic-sql/filtering-data/#regular-expressions","title":"Regular Expressions","text":"<p>Some databases support regular expression filtering:</p> <pre><code>-- PostgreSQL regular expressions\nSELECT first_name, last_name, email\nFROM employees\nWHERE email ~ '^[a-zA-Z0-9]+@company\\.(com|org)$';\n\n-- MySQL regular expressions\nSELECT first_name, last_name, phone\nFROM employees\nWHERE phone REGEXP '^[0-9]{3}-[0-9]{3}-[0-9]{4}$';\n\n-- SQL Server (limited regex support, use LIKE with patterns)\nSELECT first_name, last_name, phone\nFROM employees\nWHERE phone LIKE '[0-9][0-9][0-9]-[0-9][0-9][0-9]-[0-9][0-9][0-9][0-9]';\n</code></pre>"},{"location":"programming/sql/basic-sql/filtering-data/#case-sensitive-filtering","title":"Case-Sensitive Filtering","text":"<pre><code>-- Force case-sensitive comparison\nSELECT first_name, last_name\nFROM employees\nWHERE BINARY first_name = 'john';  -- MySQL\n\n-- Case-sensitive LIKE\nSELECT first_name, last_name\nFROM employees\nWHERE first_name LIKE BINARY 'John%';  -- MySQL\n\n-- PostgreSQL (default case-sensitive)\nSELECT first_name, last_name\nFROM employees\nWHERE first_name = 'John';\n</code></pre>"},{"location":"programming/sql/basic-sql/filtering-data/#performance-considerations","title":"Performance Considerations","text":""},{"location":"programming/sql/basic-sql/filtering-data/#index-usage","title":"Index Usage","text":"<p>Performance Tips</p> <p>Proper indexing is crucial for query performance, especially with WHERE clauses.</p> <pre><code>-- Create indexes on frequently filtered columns\nCREATE INDEX idx_department ON employees(department);\nCREATE INDEX idx_salary ON employees(salary);\nCREATE INDEX idx_hire_date ON employees(hire_date);\n\n-- Composite index for multiple column filtering\nCREATE INDEX idx_dept_salary ON employees(department, salary);\n</code></pre>"},{"location":"programming/sql/basic-sql/filtering-data/#efficient-filtering-practices","title":"Efficient Filtering Practices","text":"<pre><code>-- GOOD: Use indexed columns in WHERE clause\nSELECT first_name, last_name, salary\nFROM employees\nWHERE department = 'Engineering';  -- Assuming department is indexed\n\n-- AVOID: Functions on indexed columns prevent index usage\nSELECT first_name, last_name, salary\nFROM employees\nWHERE UPPER(department) = 'ENGINEERING';  -- Index on department won't be used\n\n-- BETTER: Store data consistently or use functional index\nSELECT first_name, last_name, salary\nFROM employees\nWHERE department = 'Engineering';  -- Ensure consistent case in data\n\n-- GOOD: Range queries on indexed columns\nSELECT first_name, last_name, salary\nFROM employees\nWHERE salary BETWEEN 50000 AND 70000;\n\n-- AVOID: Negation can prevent index usage\nSELECT first_name, last_name, salary\nFROM employees\nWHERE NOT department = 'HR';\n\n-- BETTER: Use positive conditions when possible\nSELECT first_name, last_name, salary\nFROM employees\nWHERE department IN ('Engineering', 'Sales', 'Marketing');\n</code></pre>"},{"location":"programming/sql/basic-sql/filtering-data/#filtering-with-exists-vs-in","title":"Filtering with EXISTS vs IN","text":"<pre><code>-- Using EXISTS (often more efficient for large datasets)\nSELECT e1.first_name, e1.last_name, e1.department\nFROM employees e1\nWHERE EXISTS (\n    SELECT 1 \n    FROM departments d \n    WHERE d.name = e1.department AND d.budget &gt; 100000\n);\n\n-- Using IN (good for smaller result sets)\nSELECT e1.first_name, e1.last_name, e1.department\nFROM employees e1\nWHERE e1.department IN (\n    SELECT d.name \n    FROM departments d \n    WHERE d.budget &gt; 100000\n);\n</code></pre>"},{"location":"programming/sql/basic-sql/filtering-data/#real-world-examples","title":"Real-World Examples","text":""},{"location":"programming/sql/basic-sql/filtering-data/#e-commerce-order-filtering","title":"E-commerce Order Filtering","text":"<pre><code>-- Sample orders table structure\n-- orders: order_id, customer_id, order_date, total_amount, status, shipping_country\n\n-- Find recent high-value orders\nSELECT order_id, customer_id, order_date, total_amount\nFROM orders\nWHERE order_date &gt;= CURRENT_DATE - INTERVAL '30 days'\n  AND total_amount &gt; 500\n  AND status = 'completed';\n\n-- Find orders requiring attention\nSELECT order_id, customer_id, order_date, status\nFROM orders\nWHERE (status = 'pending' AND order_date &lt; CURRENT_DATE - INTERVAL '7 days')\n   OR (status = 'processing' AND order_date &lt; CURRENT_DATE - INTERVAL '3 days')\n   OR status = 'failed';\n\n-- International orders with specific criteria\nSELECT order_id, customer_id, shipping_country, total_amount\nFROM orders\nWHERE shipping_country NOT IN ('USA', 'Canada')\n  AND total_amount BETWEEN 100 AND 1000\n  AND status = 'completed'\n  AND order_date &gt;= '2023-01-01';\n</code></pre>"},{"location":"programming/sql/basic-sql/filtering-data/#user-activity-analysis","title":"User Activity Analysis","text":"<pre><code>-- Sample user_sessions table\n-- user_sessions: session_id, user_id, login_time, logout_time, ip_address, device_type\n\n-- Find suspicious login patterns\nSELECT user_id, login_time, ip_address, device_type\nFROM user_sessions\nWHERE login_time &gt;= CURRENT_DATE - INTERVAL '24 hours'\n  AND user_id IN (\n      SELECT user_id \n      FROM user_sessions \n      WHERE login_time &gt;= CURRENT_DATE - INTERVAL '24 hours'\n      GROUP BY user_id \n      HAVING COUNT(DISTINCT ip_address) &gt; 5\n  );\n\n-- Active users on mobile devices\nSELECT user_id, COUNT(*) as session_count, \n       MIN(login_time) as first_login,\n       MAX(login_time) as last_login\nFROM user_sessions\nWHERE login_time &gt;= CURRENT_DATE - INTERVAL '7 days'\n  AND device_type LIKE '%mobile%'\n  AND logout_time IS NOT NULL  -- Completed sessions only\nGROUP BY user_id\nHAVING COUNT(*) &gt;= 3;\n</code></pre>"},{"location":"programming/sql/basic-sql/filtering-data/#inventory-management","title":"Inventory Management","text":"<pre><code>-- Sample products table\n-- products: product_id, name, category, price, stock_quantity, reorder_level, last_updated\n\n-- Low stock alerts\nSELECT product_id, name, category, stock_quantity, reorder_level\nFROM products\nWHERE stock_quantity &lt;= reorder_level\n  AND stock_quantity &gt; 0  -- Not completely out of stock\n  AND category NOT IN ('discontinued', 'seasonal')\nORDER BY (reorder_level - stock_quantity) DESC;\n\n-- Price analysis\nSELECT category, \n       COUNT(*) as product_count,\n       AVG(price) as avg_price,\n       MIN(price) as min_price,\n       MAX(price) as max_price\nFROM products\nWHERE stock_quantity &gt; 0  -- In stock only\n  AND last_updated &gt;= CURRENT_DATE - INTERVAL '90 days'\n  AND price BETWEEN 10 AND 1000  -- Reasonable price range\nGROUP BY category\nHAVING COUNT(*) &gt;= 5  -- Categories with at least 5 products\nORDER BY avg_price DESC;\n</code></pre>"},{"location":"programming/sql/basic-sql/filtering-data/#summary","title":"Summary","text":"<p>Data filtering with the WHERE clause is essential for extracting meaningful information from databases. Key takeaways:</p> <ol> <li>Use appropriate operators for different data types and conditions</li> <li>Combine conditions logically with AND, OR, and NOT operators</li> <li>Handle NULL values explicitly with IS NULL and IS NOT NULL</li> <li>Leverage pattern matching with LIKE for flexible text searches</li> <li>Use range and list filtering for efficient multi-value conditions</li> <li>Consider performance implications when designing filters</li> <li>Test complex conditions thoroughly with representative data</li> </ol> <p>Best Practices</p> <ul> <li>Always test filters with sample data first</li> <li>Use parentheses to clarify complex logical conditions</li> <li>Consider indexing frequently filtered columns</li> <li>Be mindful of case sensitivity requirements</li> <li>Handle NULL values appropriately in your logic</li> <li>Document complex filtering logic with comments</li> </ul> <p>Master these filtering techniques to write more efficient and precise SQL queries that return exactly the data you need.</p>"},{"location":"programming/sql/basic-sql/joining-tables/","title":"Joining Tables","text":"<p>How to join tables in SQL.</p>"},{"location":"programming/sql/basic-sql/ordering-result/","title":"How to Order Results in SQL Queries","text":""},{"location":"programming/sql/basic-sql/ordering-result/#overview","title":"Overview","text":"<p>Ordering query results is a fundamental aspect of SQL that allows you to control how data is presented. The <code>ORDER BY</code> clause enables you to sort records based on one or more columns in ascending or descending order.</p> <p>Quick Summary</p> <p>The <code>ORDER BY</code> clause is used to sort the result set of a query by one or more columns. It always comes at the end of a SQL statement, just before <code>LIMIT</code> if present.</p>"},{"location":"programming/sql/basic-sql/ordering-result/#basic-syntax","title":"Basic Syntax","text":"<p>The basic syntax for ordering results is:</p> <pre><code>SELECT column1, column2, ...\nFROM table_name\nORDER BY column_name [ASC|DESC];\n</code></pre>"},{"location":"programming/sql/basic-sql/ordering-result/#key-components","title":"Key Components","text":"<ul> <li>ORDER BY: The clause that initiates sorting</li> <li>column_name: The column(s) to sort by</li> <li>ASC: Ascending order (default, optional)</li> <li>DESC: Descending order</li> </ul>"},{"location":"programming/sql/basic-sql/ordering-result/#single-column-ordering","title":"Single Column Ordering","text":""},{"location":"programming/sql/basic-sql/ordering-result/#ascending-order-default","title":"Ascending Order (Default)","text":"<pre><code>-- Get all employees sorted by last name (A to Z)\nSELECT first_name, last_name, salary\nFROM employees\nORDER BY last_name;\n\n-- Explicit ascending order\nSELECT first_name, last_name, salary\nFROM employees\nORDER BY last_name ASC;\n</code></pre>"},{"location":"programming/sql/basic-sql/ordering-result/#descending-order","title":"Descending Order","text":"<pre><code>-- Get all employees sorted by salary (highest to lowest)\nSELECT first_name, last_name, salary\nFROM employees\nORDER BY salary DESC;\n</code></pre> <p>Real-world Example</p> <pre><code>-- Get top 10 highest paid employees\nSELECT employee_id, first_name, last_name, salary\nFROM employees\nORDER BY salary DESC\nLIMIT 10;\n</code></pre>"},{"location":"programming/sql/basic-sql/ordering-result/#multiple-column-ordering","title":"Multiple Column Ordering","text":"<p>You can sort by multiple columns by separating them with commas. The sorting happens in the order specified.</p> <pre><code>-- Sort by department first, then by salary within each department\nSELECT first_name, last_name, department, salary\nFROM employees\nORDER BY department ASC, salary DESC;\n</code></pre>"},{"location":"programming/sql/basic-sql/ordering-result/#order-of-precedence","title":"Order of Precedence","text":"<p>When using multiple columns: 1. Primary sort: First column specified 2. Secondary sort: Second column (applied within groups of the first column) 3. Tertiary sort: Third column, and so on</p> <p>Best Practice</p> <p>Use multiple column sorting when you want to create meaningful hierarchical ordering, such as sorting by category first, then by date within each category.</p>"},{"location":"programming/sql/basic-sql/ordering-result/#ordering-by-column-position","title":"Ordering by Column Position","text":"<p>Instead of column names, you can use column positions (1-based indexing):</p> <pre><code>-- Sort by the second column (last_name), then by the third column (salary)\nSELECT first_name, last_name, salary\nFROM employees\nORDER BY 2, 3 DESC;\n</code></pre> <p>Caution with Column Positions</p> <p>While ordering by column position works, it's less readable and prone to errors if you modify your SELECT clause. Use column names when possible.</p>"},{"location":"programming/sql/basic-sql/ordering-result/#ordering-with-expressions","title":"Ordering with Expressions","text":"<p>You can order by calculated expressions or functions:</p> <pre><code>-- Order by calculated annual salary\nSELECT first_name, last_name, salary\nFROM employees\nORDER BY salary * 12 DESC;\n\n-- Order by string length of last name\nSELECT first_name, last_name\nFROM employees\nORDER BY LENGTH(last_name) DESC;\n</code></pre>"},{"location":"programming/sql/basic-sql/ordering-result/#handling-null-values","title":"Handling NULL Values","text":"<p>Different databases handle NULL values differently when ordering:</p>"},{"location":"programming/sql/basic-sql/ordering-result/#mysql-and-postgresql","title":"MySQL and PostgreSQL","text":"<pre><code>-- NULLs appear last in ASC order\nSELECT name, email\nFROM users\nORDER BY email ASC;\n\n-- Force NULLs first or last (PostgreSQL)\nSELECT name, email\nFROM users\nORDER BY email ASC NULLS FIRST;\n</code></pre>"},{"location":"programming/sql/basic-sql/ordering-result/#sql-server","title":"SQL Server","text":"<pre><code>-- NULLs appear first in ASC order by default\n-- Use ISNULL to handle NULLs\nSELECT name, email\nFROM users\nORDER BY ISNULL(email, 'ZZZZ') ASC;\n</code></pre> <p>Database Differences</p> <ul> <li>MySQL: NULLs sort first for ASC, last for DESC</li> <li>PostgreSQL: NULLs sort last for ASC, first for DESC (can be controlled with NULLS FIRST/LAST)</li> <li>SQL Server: NULLs sort first for both ASC and DESC</li> </ul>"},{"location":"programming/sql/basic-sql/ordering-result/#advanced-ordering-techniques","title":"Advanced Ordering Techniques","text":""},{"location":"programming/sql/basic-sql/ordering-result/#conditional-ordering-case-expression","title":"Conditional Ordering (CASE Expression)","text":"<pre><code>-- Custom ordering: VIP customers first, then regular customers by name\nSELECT customer_name, customer_type\nFROM customers\nORDER BY \n    CASE \n        WHEN customer_type = 'VIP' THEN 1\n        WHEN customer_type = 'Premium' THEN 2\n        ELSE 3\n    END,\n    customer_name ASC;\n</code></pre>"},{"location":"programming/sql/basic-sql/ordering-result/#ordering-by-related-table-data-subqueries","title":"Ordering by Related Table Data (Subqueries)","text":"<pre><code>-- Order employees by their department name\nSELECT e.first_name, e.last_name, e.department_id\nFROM employees e\nORDER BY (\n    SELECT dept_name \n    FROM departments d \n    WHERE d.department_id = e.department_id\n) ASC;\n</code></pre>"},{"location":"programming/sql/basic-sql/ordering-result/#random-ordering","title":"Random Ordering","text":"<pre><code>-- MySQL\nSELECT * FROM products ORDER BY RAND() LIMIT 5;\n\n-- PostgreSQL\nSELECT * FROM products ORDER BY RANDOM() LIMIT 5;\n\n-- SQL Server\nSELECT TOP 5 * FROM products ORDER BY NEWID();\n</code></pre>"},{"location":"programming/sql/basic-sql/ordering-result/#performance-considerations","title":"Performance Considerations","text":""},{"location":"programming/sql/basic-sql/ordering-result/#using-indexes","title":"Using Indexes","text":"<pre><code>-- This query will benefit from an index on salary column\nSELECT employee_id, first_name, last_name, salary\nFROM employees\nORDER BY salary DESC;\n</code></pre> <p>Performance Tips</p> <ul> <li>Create indexes on columns frequently used in ORDER BY clauses</li> <li>Avoid ordering by complex expressions if possible</li> <li>Consider the impact of ORDER BY on large datasets</li> <li>Use LIMIT with ORDER BY to reduce processing time</li> </ul>"},{"location":"programming/sql/basic-sql/ordering-result/#query-execution-order","title":"Query Execution Order","text":"<p>Understanding SQL execution order helps with performance:</p> <ol> <li>FROM - Table selection</li> <li>WHERE - Row filtering</li> <li>GROUP BY - Grouping</li> <li>HAVING - Group filtering</li> <li>SELECT - Column selection</li> <li>ORDER BY - Sorting</li> <li>LIMIT - Row limiting</li> </ol>"},{"location":"programming/sql/basic-sql/ordering-result/#common-use-cases","title":"Common Use Cases","text":""},{"location":"programming/sql/basic-sql/ordering-result/#pagination","title":"Pagination","text":"<pre><code>-- Get page 2 of results (10 records per page)\nSELECT customer_id, customer_name, created_date\nFROM customers\nORDER BY created_date DESC\nLIMIT 10 OFFSET 10;\n</code></pre>"},{"location":"programming/sql/basic-sql/ordering-result/#top-n-queries","title":"Top N Queries","text":"<pre><code>-- Get top 5 best-selling products\nSELECT product_name, total_sales\nFROM products\nORDER BY total_sales DESC\nLIMIT 5;\n</code></pre>"},{"location":"programming/sql/basic-sql/ordering-result/#ranking-and-analytics","title":"Ranking and Analytics","text":"<pre><code>-- Rank employees by salary within each department\nSELECT \n    first_name,\n    last_name,\n    department,\n    salary,\n    RANK() OVER (PARTITION BY department ORDER BY salary DESC) as salary_rank\nFROM employees\nORDER BY department, salary_rank;\n</code></pre>"},{"location":"programming/sql/basic-sql/ordering-result/#best-practices","title":"Best Practices","text":"<p>Do's</p> <ul> <li>Always specify ORDER BY when the order matters</li> <li>Use meaningful column names instead of positions when possible</li> <li>Consider performance impact on large datasets</li> <li>Use indexes on frequently ordered columns</li> <li>Be explicit about ASC/DESC for clarity</li> </ul> <p>Don'ts</p> <ul> <li>Don't rely on \"natural\" ordering without ORDER BY</li> <li>Don't use ORDER BY unnecessarily in subqueries (unless using LIMIT)</li> <li>Don't order by complex expressions without considering performance</li> <li>Don't assume consistent ordering across different database systems</li> </ul>"},{"location":"programming/sql/basic-sql/ordering-result/#database-specific-features","title":"Database-Specific Features","text":""},{"location":"programming/sql/basic-sql/ordering-result/#postgresql","title":"PostgreSQL","text":"<pre><code>-- NULLS FIRST/LAST control\nSELECT name, score\nFROM students\nORDER BY score DESC NULLS LAST;\n\n-- Using COLLATE for custom text sorting\nSELECT name\nFROM users\nORDER BY name COLLATE \"C\";\n</code></pre>"},{"location":"programming/sql/basic-sql/ordering-result/#mysql","title":"MySQL","text":"<pre><code>-- Using FIELD() for custom ordering\nSELECT name, priority\nFROM tasks\nORDER BY FIELD(priority, 'High', 'Medium', 'Low');\n</code></pre>"},{"location":"programming/sql/basic-sql/ordering-result/#sql-server_1","title":"SQL Server","text":"<pre><code>-- Using TOP with ORDER BY\nSELECT TOP 10 product_name, price\nFROM products\nORDER BY price DESC;\n</code></pre>"},{"location":"programming/sql/basic-sql/ordering-result/#troubleshooting-common-issues","title":"Troubleshooting Common Issues","text":""},{"location":"programming/sql/basic-sql/ordering-result/#issue-unexpected-sort-order","title":"Issue: Unexpected Sort Order","text":"<pre><code>-- Problem: Numbers stored as text sort alphabetically\n-- Solution: Cast to numeric type\nSELECT product_name, price\nFROM products\nORDER BY CAST(price AS DECIMAL(10,2)) DESC;\n</code></pre>"},{"location":"programming/sql/basic-sql/ordering-result/#issue-case-sensitive-sorting","title":"Issue: Case-Sensitive Sorting","text":"<pre><code>-- Solution: Use UPPER() or LOWER() for case-insensitive sorting\nSELECT customer_name\nFROM customers\nORDER BY UPPER(customer_name);\n</code></pre>"},{"location":"programming/sql/basic-sql/ordering-result/#summary","title":"Summary","text":"<p>The <code>ORDER BY</code> clause is essential for controlling how query results are presented. Key takeaways:</p> <ul> <li>Use <code>ORDER BY</code> to sort results by one or more columns</li> <li>Specify <code>ASC</code> or <code>DESC</code> for explicit ordering direction</li> <li>Multiple columns create hierarchical sorting</li> <li>Consider performance implications, especially with large datasets</li> <li>Handle NULL values appropriately for your database system</li> <li>Use indexes on frequently ordered columns for better performance</li> </ul> <p>Remember</p> <p>\"Without ORDER BY, the database makes no guarantees about the order of returned rows, even if they appear consistent during testing.\"</p>"},{"location":"programming/sql/basic-sql/set-operations/","title":"Set Operations","text":"<p>How to use set operations in SQL.</p>"},{"location":"programming/sql/basic-sql/working-with-tables/","title":"Working with Tables","text":"<p>How to work with tables in SQL.</p>"},{"location":"programming/sql/leveling-up-sql/aggregating-data/","title":"Aggregating Data","text":"<p>Advanced aggregation in SQL.</p>"},{"location":"programming/sql/leveling-up-sql/more-on-ctes/","title":"More on Common Table Expressions","text":"<p>Advanced CTE usage in SQL.</p>"},{"location":"programming/sql/leveling-up-sql/more-techniques-triggers-pivot-tables-and-variables/","title":"More Techniques: Triggers, Pivot Tables and Variables","text":"<p>Advanced SQL: triggers, pivot tables, and variables.</p>"},{"location":"programming/sql/leveling-up-sql/table-relationships-and-joins/","title":"Table Relationships and Joins","text":"<p>Understanding relationships and joins in SQL.</p>"},{"location":"programming/sql/leveling-up-sql/using-views-and-friends/","title":"Using Views and Friends","text":"<p>Using views and related features in SQL.</p>"},{"location":"programming/sql/leveling-up-sql/window-functions/","title":"Window Functions","text":"<p>How to use window functions in SQL.</p>"},{"location":"programming/sql/leveling-up-sql/working-with-calculated-data/","title":"Working with Calculated Data","text":"<p>Advanced calculated data techniques in SQL.</p>"},{"location":"programming/sql/leveling-up-sql/working-with-subqueries-and-ctes/","title":"Working with Subqueries and Common Table Expressions","text":"<p>How to use subqueries and CTEs in SQL.</p>"},{"location":"programming/sql/leveling-up-sql/working-with-table-design/","title":"Working with Table Design","text":"<p>Advanced table design in SQL.</p>"},{"location":"resources/","title":"Resources","text":"<p>Useful resources for developers.</p>"},{"location":"snippets/commands/docker/","title":"Docker Commands","text":"<p>Common Docker CLI commands and usage examples.</p>"},{"location":"snippets/commands/git/","title":"Git Commands","text":"<p>Common Git commands and usage examples.</p>"},{"location":"snippets/commands/kubernetes/","title":"Kubernetes Commands","text":"<p>Common kubectl commands and usage examples.</p>"},{"location":"snippets/commands/linux/","title":"Linux Commands","text":"<p>Common Linux shell commands and usage examples.</p>"},{"location":"snippets/templates/api-documentation/","title":"API Documentation Template","text":"<p>A template for documenting APIs.</p>"},{"location":"snippets/templates/api-documentation/#demo","title":"Demo","text":""},{"location":"snippets/templates/project-structure/","title":"Project Structure Template","text":"<p>A template for organizing project folders and files.</p>"},{"location":"snippets/templates/security-checklist/","title":"Security Checklist Template","text":"<p>A checklist for security best practices.</p>"},{"location":"syntax/example/","title":"Mkdocs markdown extension syntax examples","text":""},{"location":"syntax/example/#arithmatex","title":"Arithmatex","text":"<ul> <li><code>pymdownx.arithmatex</code></li> <li>Inline: <code>$p(x|y) = \\frac{p(y|x)p(x)}{p(y)}$, \\(p(x|y) = \\frac{p(y|x)p(x)}{p(y)}\\).</code></li> <li>\\(p(x|y) = \\frac{p(y|x)p(x)}{p(y)}\\), \\(p(x|y) = \\frac{p(y|x)p(x)}{p(y)}\\).</li> <li>Block: <pre><code>$$\nE(\\mathbf{v}, \\mathbf{h}) = -\\sum_{i,j}w_{ij}v_i h_j - \\sum_i b_i v_i - \\sum_j c_j h_j\n$$\n\n\\[3 &lt; 4\\]\n\n\\begin{align}\n    p(v_i=1|\\mathbf{h}) &amp; = \\sigma\\left(\\sum_j w_{ij}h_j + b_i\\right) \\\\\n    p(h_j=1|\\mathbf{v}) &amp; = \\sigma\\left(\\sum_i w_{ij}v_i + c_j\\right)\n\\end{align}\n</code></pre></li> </ul> \\[ E(\\mathbf{v}, \\mathbf{h}) = -\\sum_{i,j}w_{ij}v_i h_j - \\sum_i b_i v_i - \\sum_j c_j h_j \\] \\[3 &lt; 4\\] \\[\\begin{align}     p(v_i=1|\\mathbf{h}) &amp; = \\sigma\\left(\\sum_j w_{ij}h_j + b_i\\right) \\\\     p(h_j=1|\\mathbf{v}) &amp; = \\sigma\\left(\\sum_i w_{ij}v_i + c_j\\right) \\end{align}\\]"},{"location":"syntax/example/#betterem","title":"BetterEm","text":"<pre><code>This * won't emphasize *\n\nThis *will emphasize*\n\n___A lot of underscores____________is okay___\n</code></pre> <p>This * won't emphasize *</p> <p>This will emphasize</p> <p>A lot of underscores____________is okay</p>"},{"location":"syntax/example/#blocks","title":"Blocks","text":"<p>Some title</p> <p>Some content</p> <p>Some title</p> <p>Some content</p> <p>Some title</p> <p>Some content</p> Fruit Amount Apple 20 Peach 10 Banana 3 Watermelon 1 <p>Fruit Count</p> <pre><code>graph TD\n    A[Hard] --&gt;|Text| B(Round)\n    B --&gt; C{Decision}\n    C --&gt;|One| D[Result 1]\n    C --&gt;|Two| E[Result 2]</code></pre> <p>Figure 1. Decision Diagram</p> Fruit Amount Apple 20 Peach 10 Banana 3 Watermelon 1 <p>Table 1. Fruit Count</p> Apple Pomaceous fruit of plants of the genus Malus in   the family Rosaceae. Apple Pomaceous fruit of plants of the genus Malus in   the family Rosaceae. Orange The fruit of an evergreen tree of the genus Citrus."},{"location":"syntax/example/#tasklist","title":"Tasklist","text":"<p>Task List</p> <ul> <li> item 1<ul> <li> item A</li> <li> item B     more text<ul> <li> item a</li> <li> item b</li> <li> item c</li> </ul> </li> <li> item C</li> </ul> </li> <li> item 2</li> <li> item 3</li> </ul>"},{"location":"syntax/example/#progressbar","title":"ProgressBar","text":"<p> <p>85%</p> <p>100%</p> </p> <p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> </p>"},{"location":"syntax/example/#admonition","title":"admonition","text":"<p>Ghi ch\u00fa</p> <p>\u0110\u00e2y l\u00e0 m\u1ed9t ghi ch\u00fa quan tr\u1ecdng</p> <p>M\u1eb9o hay</p> <p>\u0110\u00e2y l\u00e0 m\u1ed9t m\u1eb9o h\u1eefu \u00edch</p> <p>C\u1ea3nh b\u00e1o</p> <p>H\u00e3y c\u1ea9n th\u1eadn v\u1edbi \u0111i\u1ec1u n\u00e0y</p> <p>Nguy hi\u1ec3m</p> <p>\u0110i\u1ec1u n\u00e0y r\u1ea5t quan tr\u1ecdng!</p> <p>Th\u00e0nh c\u00f4ng</p> <p>B\u1ea1n \u0111\u00e3 ho\u00e0n th\u00e0nh!</p> <p>L\u1ed7i</p> <p>C\u00f3 l\u1ed7i x\u1ea3y ra</p> <p>L\u1ed7i ph\u1ea7n m\u1ec1m</p> <p>\u0110\u00e2y l\u00e0 m\u1ed9t bug c\u1ea7n s\u1eeda</p> <p>V\u00ed d\u1ee5</p> <p>\u0110\u00e2y l\u00e0 m\u1ed9t v\u00ed d\u1ee5 minh h\u1ecda</p> <p>Tr\u00edch d\u1eabn</p> <p>\"\u0110\u00e2y l\u00e0 m\u1ed9t c\u00e2u tr\u00edch d\u1eabn\"</p> <p>C\u00e2u h\u1ecfi</p> <p>B\u1ea1n c\u00f3 th\u1eafc m\u1eafc g\u00ec kh\u00f4ng?</p> <p>Th\u00f4ng tin</p> <p>Th\u00f4ng tin b\u1ed5 sung</p> <p>T\u00f3m t\u1eaft</p> <p>T\u00f3m t\u1eaft n\u1ed9i dung ch\u00ednh</p>"},{"location":"syntax/example/#references","title":"References","text":"<ul> <li>PyMdown Extensions Documentation: https://facelessuser.github.io/pymdown-extensions/</li> </ul>"},{"location":"testing/","title":"Testing","text":"<p>Testing strategies and frameworks.</p>"},{"location":"tools/","title":"Tools","text":"<p>Development tools and utilities.</p>"}]}